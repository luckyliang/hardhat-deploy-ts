/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ILANDRegistryInterface extends utils.Interface {
  functions: {
    "ownerOfLand(int256,int256)": FunctionFragment;
    "assignNewParcel(int256,int256,address)": FunctionFragment;
    "ownerOfLandMany(int256[],int256[])": FunctionFragment;
    "updateManyLandData(int256[],int256[],string)": FunctionFragment;
    "transferLand(int256,int256,address)": FunctionFragment;
    "landData(int256,int256)": FunctionFragment;
    "transferManyLand(int256[],int256[],address)": FunctionFragment;
    "ping()": FunctionFragment;
    "encodeTokenId(int256,int256)": FunctionFragment;
    "decodeTokenId(uint256)": FunctionFragment;
    "assignMultipleParcels(int256[],int256[],address)": FunctionFragment;
    "landOf(address)": FunctionFragment;
    "exists(int256,int256)": FunctionFragment;
    "updateLandData(int256,int256,string)": FunctionFragment;
    "setUpdateManager(address,address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ownerOfLand"
      | "assignNewParcel"
      | "ownerOfLandMany"
      | "updateManyLandData"
      | "transferLand"
      | "landData"
      | "transferManyLand"
      | "ping"
      | "encodeTokenId"
      | "decodeTokenId"
      | "assignMultipleParcels"
      | "landOf"
      | "exists"
      | "updateLandData"
      | "setUpdateManager"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ownerOfLand",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "assignNewParcel",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOfLandMany",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateManyLandData",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLand",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "landData",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferManyLand",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "ping", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "encodeTokenId",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeTokenId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "assignMultipleParcels",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "landOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLandData",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpdateManager",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "ownerOfLand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignNewParcel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerOfLandMany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateManyLandData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferLand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "landData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferManyLand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ping", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "encodeTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignMultipleParcels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "landOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateLandData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpdateManager",
    data: BytesLike
  ): Result;

  events: {
    "Update(uint256,address,address,string)": EventFragment;
    "UpdateOperator(uint256,address)": EventFragment;
    "UpdateManager(address,address,address,bool)": EventFragment;
    "DeployAuthorized(address,address)": EventFragment;
    "DeployForbidden(address,address)": EventFragment;
    "SetLandBalanceToken(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Update"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployAuthorized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployForbidden"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLandBalanceToken"): EventFragment;
}

export interface UpdateEventObject {
  assetId: BigNumber;
  holder: string;
  operator: string;
  data: string;
}
export type UpdateEvent = TypedEvent<
  [BigNumber, string, string, string],
  UpdateEventObject
>;

export type UpdateEventFilter = TypedEventFilter<UpdateEvent>;

export interface UpdateOperatorEventObject {
  assetId: BigNumber;
  operator: string;
}
export type UpdateOperatorEvent = TypedEvent<
  [BigNumber, string],
  UpdateOperatorEventObject
>;

export type UpdateOperatorEventFilter = TypedEventFilter<UpdateOperatorEvent>;

export interface UpdateManagerEventObject {
  _owner: string;
  _operator: string;
  _caller: string;
  _approved: boolean;
}
export type UpdateManagerEvent = TypedEvent<
  [string, string, string, boolean],
  UpdateManagerEventObject
>;

export type UpdateManagerEventFilter = TypedEventFilter<UpdateManagerEvent>;

export interface DeployAuthorizedEventObject {
  _caller: string;
  _deployer: string;
}
export type DeployAuthorizedEvent = TypedEvent<
  [string, string],
  DeployAuthorizedEventObject
>;

export type DeployAuthorizedEventFilter =
  TypedEventFilter<DeployAuthorizedEvent>;

export interface DeployForbiddenEventObject {
  _caller: string;
  _deployer: string;
}
export type DeployForbiddenEvent = TypedEvent<
  [string, string],
  DeployForbiddenEventObject
>;

export type DeployForbiddenEventFilter = TypedEventFilter<DeployForbiddenEvent>;

export interface SetLandBalanceTokenEventObject {
  _previousLandBalance: string;
  _newLandBalance: string;
}
export type SetLandBalanceTokenEvent = TypedEvent<
  [string, string],
  SetLandBalanceTokenEventObject
>;

export type SetLandBalanceTokenEventFilter =
  TypedEventFilter<SetLandBalanceTokenEvent>;

export interface ILANDRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILANDRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ownerOfLand(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    assignNewParcel(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ownerOfLandMany(
      x: PromiseOrValue<BigNumberish>[],
      y: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    updateManyLandData(
      x: PromiseOrValue<BigNumberish>[],
      y: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferLand(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    landData(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferManyLand(
      x: PromiseOrValue<BigNumberish>[],
      y: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ping(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    encodeTokenId(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decodeTokenId(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    assignMultipleParcels(
      x: PromiseOrValue<BigNumberish>[],
      y: PromiseOrValue<BigNumberish>[],
      beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    landOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    exists(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateLandData(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUpdateManager(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ownerOfLand(
    x: PromiseOrValue<BigNumberish>,
    y: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  assignNewParcel(
    x: PromiseOrValue<BigNumberish>,
    y: PromiseOrValue<BigNumberish>,
    beneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ownerOfLandMany(
    x: PromiseOrValue<BigNumberish>[],
    y: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  updateManyLandData(
    x: PromiseOrValue<BigNumberish>[],
    y: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferLand(
    x: PromiseOrValue<BigNumberish>,
    y: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  landData(
    x: PromiseOrValue<BigNumberish>,
    y: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferManyLand(
    x: PromiseOrValue<BigNumberish>[],
    y: PromiseOrValue<BigNumberish>[],
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ping(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  encodeTokenId(
    x: PromiseOrValue<BigNumberish>,
    y: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decodeTokenId(
    value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  assignMultipleParcels(
    x: PromiseOrValue<BigNumberish>[],
    y: PromiseOrValue<BigNumberish>[],
    beneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  landOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber[]]>;

  exists(
    x: PromiseOrValue<BigNumberish>,
    y: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateLandData(
    x: PromiseOrValue<BigNumberish>,
    y: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUpdateManager(
    _owner: PromiseOrValue<string>,
    _operator: PromiseOrValue<string>,
    _approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ownerOfLand(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    assignNewParcel(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerOfLandMany(
      x: PromiseOrValue<BigNumberish>[],
      y: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    updateManyLandData(
      x: PromiseOrValue<BigNumberish>[],
      y: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferLand(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    landData(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferManyLand(
      x: PromiseOrValue<BigNumberish>[],
      y: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    ping(overrides?: CallOverrides): Promise<void>;

    encodeTokenId(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeTokenId(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    assignMultipleParcels(
      x: PromiseOrValue<BigNumberish>[],
      y: PromiseOrValue<BigNumberish>[],
      beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    landOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    exists(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateLandData(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpdateManager(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Update(uint256,address,address,string)"(
      assetId?: PromiseOrValue<BigNumberish> | null,
      holder?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      data?: null
    ): UpdateEventFilter;
    Update(
      assetId?: PromiseOrValue<BigNumberish> | null,
      holder?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      data?: null
    ): UpdateEventFilter;

    "UpdateOperator(uint256,address)"(
      assetId?: PromiseOrValue<BigNumberish> | null,
      operator?: PromiseOrValue<string> | null
    ): UpdateOperatorEventFilter;
    UpdateOperator(
      assetId?: PromiseOrValue<BigNumberish> | null,
      operator?: PromiseOrValue<string> | null
    ): UpdateOperatorEventFilter;

    "UpdateManager(address,address,address,bool)"(
      _owner?: PromiseOrValue<string> | null,
      _operator?: PromiseOrValue<string> | null,
      _caller?: PromiseOrValue<string> | null,
      _approved?: null
    ): UpdateManagerEventFilter;
    UpdateManager(
      _owner?: PromiseOrValue<string> | null,
      _operator?: PromiseOrValue<string> | null,
      _caller?: PromiseOrValue<string> | null,
      _approved?: null
    ): UpdateManagerEventFilter;

    "DeployAuthorized(address,address)"(
      _caller?: PromiseOrValue<string> | null,
      _deployer?: PromiseOrValue<string> | null
    ): DeployAuthorizedEventFilter;
    DeployAuthorized(
      _caller?: PromiseOrValue<string> | null,
      _deployer?: PromiseOrValue<string> | null
    ): DeployAuthorizedEventFilter;

    "DeployForbidden(address,address)"(
      _caller?: PromiseOrValue<string> | null,
      _deployer?: PromiseOrValue<string> | null
    ): DeployForbiddenEventFilter;
    DeployForbidden(
      _caller?: PromiseOrValue<string> | null,
      _deployer?: PromiseOrValue<string> | null
    ): DeployForbiddenEventFilter;

    "SetLandBalanceToken(address,address)"(
      _previousLandBalance?: PromiseOrValue<string> | null,
      _newLandBalance?: PromiseOrValue<string> | null
    ): SetLandBalanceTokenEventFilter;
    SetLandBalanceToken(
      _previousLandBalance?: PromiseOrValue<string> | null,
      _newLandBalance?: PromiseOrValue<string> | null
    ): SetLandBalanceTokenEventFilter;
  };

  estimateGas: {
    ownerOfLand(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assignNewParcel(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ownerOfLandMany(
      x: PromiseOrValue<BigNumberish>[],
      y: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateManyLandData(
      x: PromiseOrValue<BigNumberish>[],
      y: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferLand(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    landData(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferManyLand(
      x: PromiseOrValue<BigNumberish>[],
      y: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ping(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    encodeTokenId(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeTokenId(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assignMultipleParcels(
      x: PromiseOrValue<BigNumberish>[],
      y: PromiseOrValue<BigNumberish>[],
      beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    landOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exists(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateLandData(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUpdateManager(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ownerOfLand(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assignNewParcel(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ownerOfLandMany(
      x: PromiseOrValue<BigNumberish>[],
      y: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateManyLandData(
      x: PromiseOrValue<BigNumberish>[],
      y: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferLand(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    landData(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferManyLand(
      x: PromiseOrValue<BigNumberish>[],
      y: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ping(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    encodeTokenId(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeTokenId(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assignMultipleParcels(
      x: PromiseOrValue<BigNumberish>[],
      y: PromiseOrValue<BigNumberish>[],
      beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    landOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exists(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateLandData(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUpdateManager(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
