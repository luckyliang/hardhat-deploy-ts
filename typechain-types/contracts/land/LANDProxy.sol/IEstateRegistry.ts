/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IEstateRegistryInterface extends utils.Interface {
  functions: {
    "ownerOf(uint256)": FunctionFragment;
    "mint(address,string)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "ownerOf" | "mint"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;

  events: {
    "CreateEstate(address,uint256,string)": EventFragment;
    "AddLand(uint256,uint256)": EventFragment;
    "RemoveLand(uint256,uint256,address)": EventFragment;
    "Update(uint256,address,address,string)": EventFragment;
    "UpdateOperator(uint256,address)": EventFragment;
    "UpdateManager(address,address,address,bool)": EventFragment;
    "SetLANDRegistry(address)": EventFragment;
    "SetEstateLandBalanceToken(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateEstate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddLand"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLand"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Update"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLANDRegistry"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetEstateLandBalanceToken"): EventFragment;
}

export interface CreateEstateEventObject {
  _owner: string;
  _estateId: BigNumber;
  _data: string;
}
export type CreateEstateEvent = TypedEvent<
  [string, BigNumber, string],
  CreateEstateEventObject
>;

export type CreateEstateEventFilter = TypedEventFilter<CreateEstateEvent>;

export interface AddLandEventObject {
  _estateId: BigNumber;
  _landId: BigNumber;
}
export type AddLandEvent = TypedEvent<
  [BigNumber, BigNumber],
  AddLandEventObject
>;

export type AddLandEventFilter = TypedEventFilter<AddLandEvent>;

export interface RemoveLandEventObject {
  _estateId: BigNumber;
  _landId: BigNumber;
  _destinatary: string;
}
export type RemoveLandEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  RemoveLandEventObject
>;

export type RemoveLandEventFilter = TypedEventFilter<RemoveLandEvent>;

export interface UpdateEventObject {
  _assetId: BigNumber;
  _holder: string;
  _operator: string;
  _data: string;
}
export type UpdateEvent = TypedEvent<
  [BigNumber, string, string, string],
  UpdateEventObject
>;

export type UpdateEventFilter = TypedEventFilter<UpdateEvent>;

export interface UpdateOperatorEventObject {
  _estateId: BigNumber;
  _operator: string;
}
export type UpdateOperatorEvent = TypedEvent<
  [BigNumber, string],
  UpdateOperatorEventObject
>;

export type UpdateOperatorEventFilter = TypedEventFilter<UpdateOperatorEvent>;

export interface UpdateManagerEventObject {
  _owner: string;
  _operator: string;
  _caller: string;
  _approved: boolean;
}
export type UpdateManagerEvent = TypedEvent<
  [string, string, string, boolean],
  UpdateManagerEventObject
>;

export type UpdateManagerEventFilter = TypedEventFilter<UpdateManagerEvent>;

export interface SetLANDRegistryEventObject {
  _registry: string;
}
export type SetLANDRegistryEvent = TypedEvent<
  [string],
  SetLANDRegistryEventObject
>;

export type SetLANDRegistryEventFilter = TypedEventFilter<SetLANDRegistryEvent>;

export interface SetEstateLandBalanceTokenEventObject {
  _previousEstateLandBalance: string;
  _newEstateLandBalance: string;
}
export type SetEstateLandBalanceTokenEvent = TypedEvent<
  [string, string],
  SetEstateLandBalanceTokenEventObject
>;

export type SetEstateLandBalanceTokenEventFilter =
  TypedEventFilter<SetEstateLandBalanceTokenEvent>;

export interface IEstateRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEstateRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ownerOf(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { _owner: string }>;

    mint(
      to: PromiseOrValue<string>,
      metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ownerOf(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  mint(
    to: PromiseOrValue<string>,
    metadata: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ownerOf(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    mint(
      to: PromiseOrValue<string>,
      metadata: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "CreateEstate(address,uint256,string)"(
      _owner?: PromiseOrValue<string> | null,
      _estateId?: PromiseOrValue<BigNumberish> | null,
      _data?: null
    ): CreateEstateEventFilter;
    CreateEstate(
      _owner?: PromiseOrValue<string> | null,
      _estateId?: PromiseOrValue<BigNumberish> | null,
      _data?: null
    ): CreateEstateEventFilter;

    "AddLand(uint256,uint256)"(
      _estateId?: PromiseOrValue<BigNumberish> | null,
      _landId?: PromiseOrValue<BigNumberish> | null
    ): AddLandEventFilter;
    AddLand(
      _estateId?: PromiseOrValue<BigNumberish> | null,
      _landId?: PromiseOrValue<BigNumberish> | null
    ): AddLandEventFilter;

    "RemoveLand(uint256,uint256,address)"(
      _estateId?: PromiseOrValue<BigNumberish> | null,
      _landId?: PromiseOrValue<BigNumberish> | null,
      _destinatary?: PromiseOrValue<string> | null
    ): RemoveLandEventFilter;
    RemoveLand(
      _estateId?: PromiseOrValue<BigNumberish> | null,
      _landId?: PromiseOrValue<BigNumberish> | null,
      _destinatary?: PromiseOrValue<string> | null
    ): RemoveLandEventFilter;

    "Update(uint256,address,address,string)"(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _holder?: PromiseOrValue<string> | null,
      _operator?: PromiseOrValue<string> | null,
      _data?: null
    ): UpdateEventFilter;
    Update(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _holder?: PromiseOrValue<string> | null,
      _operator?: PromiseOrValue<string> | null,
      _data?: null
    ): UpdateEventFilter;

    "UpdateOperator(uint256,address)"(
      _estateId?: PromiseOrValue<BigNumberish> | null,
      _operator?: PromiseOrValue<string> | null
    ): UpdateOperatorEventFilter;
    UpdateOperator(
      _estateId?: PromiseOrValue<BigNumberish> | null,
      _operator?: PromiseOrValue<string> | null
    ): UpdateOperatorEventFilter;

    "UpdateManager(address,address,address,bool)"(
      _owner?: PromiseOrValue<string> | null,
      _operator?: PromiseOrValue<string> | null,
      _caller?: PromiseOrValue<string> | null,
      _approved?: null
    ): UpdateManagerEventFilter;
    UpdateManager(
      _owner?: PromiseOrValue<string> | null,
      _operator?: PromiseOrValue<string> | null,
      _caller?: PromiseOrValue<string> | null,
      _approved?: null
    ): UpdateManagerEventFilter;

    "SetLANDRegistry(address)"(
      _registry?: PromiseOrValue<string> | null
    ): SetLANDRegistryEventFilter;
    SetLANDRegistry(
      _registry?: PromiseOrValue<string> | null
    ): SetLANDRegistryEventFilter;

    "SetEstateLandBalanceToken(address,address)"(
      _previousEstateLandBalance?: PromiseOrValue<string> | null,
      _newEstateLandBalance?: PromiseOrValue<string> | null
    ): SetEstateLandBalanceTokenEventFilter;
    SetEstateLandBalanceToken(
      _previousEstateLandBalance?: PromiseOrValue<string> | null,
      _newEstateLandBalance?: PromiseOrValue<string> | null
    ): SetEstateLandBalanceTokenEventFilter;
  };

  estimateGas: {
    ownerOf(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      to: PromiseOrValue<string>,
      metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ownerOf(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: PromiseOrValue<string>,
      metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
