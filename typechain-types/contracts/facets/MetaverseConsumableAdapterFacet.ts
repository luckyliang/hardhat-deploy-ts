/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface MetaverseConsumableAdapterFacetInterface
  extends utils.Interface {
  functions: {
    "administrativeConsumer(address)": FunctionFragment;
    "consumableAdapter(address)": FunctionFragment;
    "listWithConsumableAdapter(uint256,address,uint256,uint256,uint256,uint256,address,uint256,address)": FunctionFragment;
    "rentConsumer(uint256,uint256)": FunctionFragment;
    "rentWithConsumer(uint256,uint256,uint256,address,address,uint256,address)": FunctionFragment;
    "setAdministrativeConsumerFor(address,address)": FunctionFragment;
    "setConsumableAdapter(address,address)": FunctionFragment;
    "updateAdapterAdministrativeState(uint256)": FunctionFragment;
    "updateAdapterState(uint256,uint256)": FunctionFragment;
    "updateConsumer(uint256,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "administrativeConsumer"
      | "consumableAdapter"
      | "listWithConsumableAdapter"
      | "rentConsumer"
      | "rentWithConsumer"
      | "setAdministrativeConsumerFor"
      | "setConsumableAdapter"
      | "updateAdapterAdministrativeState"
      | "updateAdapterState"
      | "updateConsumer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "administrativeConsumer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "consumableAdapter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listWithConsumableAdapter",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rentConsumer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rentWithConsumer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdministrativeConsumerFor",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setConsumableAdapter",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAdapterAdministrativeState",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAdapterState",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConsumer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "administrativeConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumableAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listWithConsumableAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rentConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rentWithConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdministrativeConsumerFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConsumableAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAdapterAdministrativeState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAdapterState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConsumer",
    data: BytesLike
  ): Result;

  events: {
    "AdministrativeConsumerUpdated(address,address)": EventFragment;
    "ConsumableAdapterUpdated(address,address)": EventFragment;
    "UpdateAdapterAdministrativeConsumer(uint256,address,address)": EventFragment;
    "UpdateAdapterConsumer(uint256,uint256,address,address)": EventFragment;
    "UpdateRentConsumer(uint256,uint256,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AdministrativeConsumerUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConsumableAdapterUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateAdapterAdministrativeConsumer"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateAdapterConsumer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateRentConsumer"): EventFragment;
}

export interface AdministrativeConsumerUpdatedEventObject {
  _metaverseRegistry: string;
  _administrativeConsumer: string;
}
export type AdministrativeConsumerUpdatedEvent = TypedEvent<
  [string, string],
  AdministrativeConsumerUpdatedEventObject
>;

export type AdministrativeConsumerUpdatedEventFilter =
  TypedEventFilter<AdministrativeConsumerUpdatedEvent>;

export interface ConsumableAdapterUpdatedEventObject {
  _metaverseRegistry: string;
  _adapter: string;
}
export type ConsumableAdapterUpdatedEvent = TypedEvent<
  [string, string],
  ConsumableAdapterUpdatedEventObject
>;

export type ConsumableAdapterUpdatedEventFilter =
  TypedEventFilter<ConsumableAdapterUpdatedEvent>;

export interface UpdateAdapterAdministrativeConsumerEventObject {
  _assetId: BigNumber;
  _adapter: string;
  _consumer: string;
}
export type UpdateAdapterAdministrativeConsumerEvent = TypedEvent<
  [BigNumber, string, string],
  UpdateAdapterAdministrativeConsumerEventObject
>;

export type UpdateAdapterAdministrativeConsumerEventFilter =
  TypedEventFilter<UpdateAdapterAdministrativeConsumerEvent>;

export interface UpdateAdapterConsumerEventObject {
  _assetId: BigNumber;
  _rentId: BigNumber;
  _adapter: string;
  _consumer: string;
}
export type UpdateAdapterConsumerEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  UpdateAdapterConsumerEventObject
>;

export type UpdateAdapterConsumerEventFilter =
  TypedEventFilter<UpdateAdapterConsumerEvent>;

export interface UpdateRentConsumerEventObject {
  _assetId: BigNumber;
  _rentId: BigNumber;
  _consumer: string;
}
export type UpdateRentConsumerEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  UpdateRentConsumerEventObject
>;

export type UpdateRentConsumerEventFilter =
  TypedEventFilter<UpdateRentConsumerEvent>;

export interface MetaverseConsumableAdapterFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MetaverseConsumableAdapterFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    administrativeConsumer(
      _metaverseRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    consumableAdapter(
      _metaverseRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    listWithConsumableAdapter(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _metaverseRegistry: PromiseOrValue<string>,
      _metaverseAssetId: PromiseOrValue<BigNumberish>,
      _minPeriod: PromiseOrValue<BigNumberish>,
      _maxPeriod: PromiseOrValue<BigNumberish>,
      _maxFutureTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _pricePerSecond: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rentConsumer(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rentWithConsumer(
      _assetId: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      _maxRentStart: PromiseOrValue<BigNumberish>,
      _consumer: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdministrativeConsumerFor(
      _metaverseRegistry: PromiseOrValue<string>,
      _administrativeConsumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConsumableAdapter(
      _metaverseRegistry: PromiseOrValue<string>,
      _consumableAdapter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAdapterAdministrativeState(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAdapterState(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateConsumer(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      _newConsumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  administrativeConsumer(
    _metaverseRegistry: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  consumableAdapter(
    _metaverseRegistry: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  listWithConsumableAdapter(
    _metaverseId: PromiseOrValue<BigNumberish>,
    _metaverseRegistry: PromiseOrValue<string>,
    _metaverseAssetId: PromiseOrValue<BigNumberish>,
    _minPeriod: PromiseOrValue<BigNumberish>,
    _maxPeriod: PromiseOrValue<BigNumberish>,
    _maxFutureTime: PromiseOrValue<BigNumberish>,
    _paymentToken: PromiseOrValue<string>,
    _pricePerSecond: PromiseOrValue<BigNumberish>,
    _referrer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rentConsumer(
    _assetId: PromiseOrValue<BigNumberish>,
    _rentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  rentWithConsumer(
    _assetId: PromiseOrValue<BigNumberish>,
    _period: PromiseOrValue<BigNumberish>,
    _maxRentStart: PromiseOrValue<BigNumberish>,
    _consumer: PromiseOrValue<string>,
    _paymentToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _referrer: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdministrativeConsumerFor(
    _metaverseRegistry: PromiseOrValue<string>,
    _administrativeConsumer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConsumableAdapter(
    _metaverseRegistry: PromiseOrValue<string>,
    _consumableAdapter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAdapterAdministrativeState(
    _assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAdapterState(
    _assetId: PromiseOrValue<BigNumberish>,
    _rentId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateConsumer(
    _assetId: PromiseOrValue<BigNumberish>,
    _rentId: PromiseOrValue<BigNumberish>,
    _newConsumer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    administrativeConsumer(
      _metaverseRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    consumableAdapter(
      _metaverseRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    listWithConsumableAdapter(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _metaverseRegistry: PromiseOrValue<string>,
      _metaverseAssetId: PromiseOrValue<BigNumberish>,
      _minPeriod: PromiseOrValue<BigNumberish>,
      _maxPeriod: PromiseOrValue<BigNumberish>,
      _maxFutureTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _pricePerSecond: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rentConsumer(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    rentWithConsumer(
      _assetId: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      _maxRentStart: PromiseOrValue<BigNumberish>,
      _consumer: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { rentId_: BigNumber; rentStartsNow_: boolean }
    >;

    setAdministrativeConsumerFor(
      _metaverseRegistry: PromiseOrValue<string>,
      _administrativeConsumer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setConsumableAdapter(
      _metaverseRegistry: PromiseOrValue<string>,
      _consumableAdapter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAdapterAdministrativeState(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAdapterState(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateConsumer(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      _newConsumer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdministrativeConsumerUpdated(address,address)"(
      _metaverseRegistry?: PromiseOrValue<string> | null,
      _administrativeConsumer?: PromiseOrValue<string> | null
    ): AdministrativeConsumerUpdatedEventFilter;
    AdministrativeConsumerUpdated(
      _metaverseRegistry?: PromiseOrValue<string> | null,
      _administrativeConsumer?: PromiseOrValue<string> | null
    ): AdministrativeConsumerUpdatedEventFilter;

    "ConsumableAdapterUpdated(address,address)"(
      _metaverseRegistry?: PromiseOrValue<string> | null,
      _adapter?: PromiseOrValue<string> | null
    ): ConsumableAdapterUpdatedEventFilter;
    ConsumableAdapterUpdated(
      _metaverseRegistry?: PromiseOrValue<string> | null,
      _adapter?: PromiseOrValue<string> | null
    ): ConsumableAdapterUpdatedEventFilter;

    "UpdateAdapterAdministrativeConsumer(uint256,address,address)"(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _adapter?: PromiseOrValue<string> | null,
      _consumer?: PromiseOrValue<string> | null
    ): UpdateAdapterAdministrativeConsumerEventFilter;
    UpdateAdapterAdministrativeConsumer(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _adapter?: PromiseOrValue<string> | null,
      _consumer?: PromiseOrValue<string> | null
    ): UpdateAdapterAdministrativeConsumerEventFilter;

    "UpdateAdapterConsumer(uint256,uint256,address,address)"(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _adapter?: PromiseOrValue<string> | null,
      _consumer?: PromiseOrValue<string> | null
    ): UpdateAdapterConsumerEventFilter;
    UpdateAdapterConsumer(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _adapter?: PromiseOrValue<string> | null,
      _consumer?: PromiseOrValue<string> | null
    ): UpdateAdapterConsumerEventFilter;

    "UpdateRentConsumer(uint256,uint256,address)"(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _consumer?: PromiseOrValue<string> | null
    ): UpdateRentConsumerEventFilter;
    UpdateRentConsumer(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _consumer?: PromiseOrValue<string> | null
    ): UpdateRentConsumerEventFilter;
  };

  estimateGas: {
    administrativeConsumer(
      _metaverseRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    consumableAdapter(
      _metaverseRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listWithConsumableAdapter(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _metaverseRegistry: PromiseOrValue<string>,
      _metaverseAssetId: PromiseOrValue<BigNumberish>,
      _minPeriod: PromiseOrValue<BigNumberish>,
      _maxPeriod: PromiseOrValue<BigNumberish>,
      _maxFutureTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _pricePerSecond: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rentConsumer(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rentWithConsumer(
      _assetId: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      _maxRentStart: PromiseOrValue<BigNumberish>,
      _consumer: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdministrativeConsumerFor(
      _metaverseRegistry: PromiseOrValue<string>,
      _administrativeConsumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConsumableAdapter(
      _metaverseRegistry: PromiseOrValue<string>,
      _consumableAdapter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAdapterAdministrativeState(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAdapterState(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateConsumer(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      _newConsumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    administrativeConsumer(
      _metaverseRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    consumableAdapter(
      _metaverseRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listWithConsumableAdapter(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _metaverseRegistry: PromiseOrValue<string>,
      _metaverseAssetId: PromiseOrValue<BigNumberish>,
      _minPeriod: PromiseOrValue<BigNumberish>,
      _maxPeriod: PromiseOrValue<BigNumberish>,
      _maxFutureTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _pricePerSecond: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rentConsumer(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rentWithConsumer(
      _assetId: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      _maxRentStart: PromiseOrValue<BigNumberish>,
      _consumer: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdministrativeConsumerFor(
      _metaverseRegistry: PromiseOrValue<string>,
      _administrativeConsumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConsumableAdapter(
      _metaverseRegistry: PromiseOrValue<string>,
      _consumableAdapter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAdapterAdministrativeState(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAdapterState(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateConsumer(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      _newConsumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
