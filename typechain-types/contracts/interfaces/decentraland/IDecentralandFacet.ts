/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IDecentralandFacetInterface extends utils.Interface {
  functions: {
    "administrativeOperator()": FunctionFragment;
    "clearEstateLANDOperators(uint256[],uint256[][])": FunctionFragment;
    "listDecentraland(uint256,address,uint256,uint256,uint256,uint256,address,uint256,address)": FunctionFragment;
    "operatorFor(uint256,uint256)": FunctionFragment;
    "rentDecentraland(uint256,uint256,uint256,address,address,uint256,address)": FunctionFragment;
    "updateAdministrativeOperator(address)": FunctionFragment;
    "updateAdministrativeState(uint256)": FunctionFragment;
    "updateOperator(uint256,uint256,address)": FunctionFragment;
    "updateState(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "administrativeOperator"
      | "clearEstateLANDOperators"
      | "listDecentraland"
      | "operatorFor"
      | "rentDecentraland"
      | "updateAdministrativeOperator"
      | "updateAdministrativeState"
      | "updateOperator"
      | "updateState"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "administrativeOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "clearEstateLANDOperators",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "listDecentraland",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorFor",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rentDecentraland",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAdministrativeOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAdministrativeState",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOperator",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateState",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "administrativeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearEstateLANDOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listDecentraland",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rentDecentraland",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAdministrativeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAdministrativeState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateState",
    data: BytesLike
  ): Result;

  events: {
    "AccrueReferralFee(uint256,uint256,address,address,uint256)": EventFragment;
    "Rent(uint256,uint256,address,uint256,uint256,address,uint256,uint256)": EventFragment;
    "UpdateAdministrativeOperator(address)": EventFragment;
    "UpdateAdministrativeState(uint256,address)": EventFragment;
    "UpdateOperator(uint256,uint256,address)": EventFragment;
    "UpdateState(uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccrueReferralFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rent"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateAdministrativeOperator"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateAdministrativeState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateState"): EventFragment;
}

export interface AccrueReferralFeeEventObject {
  _assetId: BigNumber;
  _rentId: BigNumber;
  _referrer: string;
  _paymentToken: string;
  _fee: BigNumber;
}
export type AccrueReferralFeeEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber],
  AccrueReferralFeeEventObject
>;

export type AccrueReferralFeeEventFilter =
  TypedEventFilter<AccrueReferralFeeEvent>;

export interface RentEventObject {
  _assetId: BigNumber;
  _rentId: BigNumber;
  _renter: string;
  _start: BigNumber;
  _end: BigNumber;
  _paymentToken: string;
  _rent: BigNumber;
  _protocolFee: BigNumber;
}
export type RentEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ],
  RentEventObject
>;

export type RentEventFilter = TypedEventFilter<RentEvent>;

export interface UpdateAdministrativeOperatorEventObject {
  _administrativeOperator: string;
}
export type UpdateAdministrativeOperatorEvent = TypedEvent<
  [string],
  UpdateAdministrativeOperatorEventObject
>;

export type UpdateAdministrativeOperatorEventFilter =
  TypedEventFilter<UpdateAdministrativeOperatorEvent>;

export interface UpdateAdministrativeStateEventObject {
  _assetId: BigNumber;
  _operator: string;
}
export type UpdateAdministrativeStateEvent = TypedEvent<
  [BigNumber, string],
  UpdateAdministrativeStateEventObject
>;

export type UpdateAdministrativeStateEventFilter =
  TypedEventFilter<UpdateAdministrativeStateEvent>;

export interface UpdateOperatorEventObject {
  _assetId: BigNumber;
  _rentId: BigNumber;
  _operator: string;
}
export type UpdateOperatorEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  UpdateOperatorEventObject
>;

export type UpdateOperatorEventFilter = TypedEventFilter<UpdateOperatorEvent>;

export interface UpdateStateEventObject {
  _assetId: BigNumber;
  _rentId: BigNumber;
  _operator: string;
}
export type UpdateStateEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  UpdateStateEventObject
>;

export type UpdateStateEventFilter = TypedEventFilter<UpdateStateEvent>;

export interface IDecentralandFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDecentralandFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    administrativeOperator(overrides?: CallOverrides): Promise<[string]>;

    clearEstateLANDOperators(
      _assetIds: PromiseOrValue<BigNumberish>[],
      _landIds: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    listDecentraland(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _metaverseRegistry: PromiseOrValue<string>,
      _metaverseAssetId: PromiseOrValue<BigNumberish>,
      _minPeriod: PromiseOrValue<BigNumberish>,
      _maxPeriod: PromiseOrValue<BigNumberish>,
      _maxFutureTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _pricePerSecond: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    operatorFor(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rentDecentraland(
      _assetId: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      _maxRentStart: PromiseOrValue<BigNumberish>,
      _operator: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAdministrativeOperator(
      _administrativeOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAdministrativeState(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateOperator(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      _newOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateState(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  administrativeOperator(overrides?: CallOverrides): Promise<string>;

  clearEstateLANDOperators(
    _assetIds: PromiseOrValue<BigNumberish>[],
    _landIds: PromiseOrValue<BigNumberish>[][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  listDecentraland(
    _metaverseId: PromiseOrValue<BigNumberish>,
    _metaverseRegistry: PromiseOrValue<string>,
    _metaverseAssetId: PromiseOrValue<BigNumberish>,
    _minPeriod: PromiseOrValue<BigNumberish>,
    _maxPeriod: PromiseOrValue<BigNumberish>,
    _maxFutureTime: PromiseOrValue<BigNumberish>,
    _paymentToken: PromiseOrValue<string>,
    _pricePerSecond: PromiseOrValue<BigNumberish>,
    _referrer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  operatorFor(
    _assetId: PromiseOrValue<BigNumberish>,
    _rentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  rentDecentraland(
    _assetId: PromiseOrValue<BigNumberish>,
    _period: PromiseOrValue<BigNumberish>,
    _maxRentStart: PromiseOrValue<BigNumberish>,
    _operator: PromiseOrValue<string>,
    _paymentToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _referrer: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAdministrativeOperator(
    _administrativeOperator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAdministrativeState(
    _assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateOperator(
    _assetId: PromiseOrValue<BigNumberish>,
    _rentId: PromiseOrValue<BigNumberish>,
    _newOperator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateState(
    _assetId: PromiseOrValue<BigNumberish>,
    _rentId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    administrativeOperator(overrides?: CallOverrides): Promise<string>;

    clearEstateLANDOperators(
      _assetIds: PromiseOrValue<BigNumberish>[],
      _landIds: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<void>;

    listDecentraland(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _metaverseRegistry: PromiseOrValue<string>,
      _metaverseAssetId: PromiseOrValue<BigNumberish>,
      _minPeriod: PromiseOrValue<BigNumberish>,
      _maxPeriod: PromiseOrValue<BigNumberish>,
      _maxFutureTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _pricePerSecond: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operatorFor(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    rentDecentraland(
      _assetId: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      _maxRentStart: PromiseOrValue<BigNumberish>,
      _operator: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { rentId_: BigNumber; rentStartsNow_: boolean }
    >;

    updateAdministrativeOperator(
      _administrativeOperator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAdministrativeState(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOperator(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      _newOperator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateState(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AccrueReferralFee(uint256,uint256,address,address,uint256)"(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _referrer?: PromiseOrValue<string> | null,
      _paymentToken?: PromiseOrValue<string> | null,
      _fee?: null
    ): AccrueReferralFeeEventFilter;
    AccrueReferralFee(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _referrer?: PromiseOrValue<string> | null,
      _paymentToken?: PromiseOrValue<string> | null,
      _fee?: null
    ): AccrueReferralFeeEventFilter;

    "Rent(uint256,uint256,address,uint256,uint256,address,uint256,uint256)"(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _renter?: PromiseOrValue<string> | null,
      _start?: null,
      _end?: null,
      _paymentToken?: PromiseOrValue<string> | null,
      _rent?: null,
      _protocolFee?: null
    ): RentEventFilter;
    Rent(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _renter?: PromiseOrValue<string> | null,
      _start?: null,
      _end?: null,
      _paymentToken?: PromiseOrValue<string> | null,
      _rent?: null,
      _protocolFee?: null
    ): RentEventFilter;

    "UpdateAdministrativeOperator(address)"(
      _administrativeOperator?: null
    ): UpdateAdministrativeOperatorEventFilter;
    UpdateAdministrativeOperator(
      _administrativeOperator?: null
    ): UpdateAdministrativeOperatorEventFilter;

    "UpdateAdministrativeState(uint256,address)"(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _operator?: PromiseOrValue<string> | null
    ): UpdateAdministrativeStateEventFilter;
    UpdateAdministrativeState(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _operator?: PromiseOrValue<string> | null
    ): UpdateAdministrativeStateEventFilter;

    "UpdateOperator(uint256,uint256,address)"(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _operator?: PromiseOrValue<string> | null
    ): UpdateOperatorEventFilter;
    UpdateOperator(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _operator?: PromiseOrValue<string> | null
    ): UpdateOperatorEventFilter;

    "UpdateState(uint256,uint256,address)"(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _operator?: PromiseOrValue<string> | null
    ): UpdateStateEventFilter;
    UpdateState(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _operator?: PromiseOrValue<string> | null
    ): UpdateStateEventFilter;
  };

  estimateGas: {
    administrativeOperator(overrides?: CallOverrides): Promise<BigNumber>;

    clearEstateLANDOperators(
      _assetIds: PromiseOrValue<BigNumberish>[],
      _landIds: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    listDecentraland(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _metaverseRegistry: PromiseOrValue<string>,
      _metaverseAssetId: PromiseOrValue<BigNumberish>,
      _minPeriod: PromiseOrValue<BigNumberish>,
      _maxPeriod: PromiseOrValue<BigNumberish>,
      _maxFutureTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _pricePerSecond: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    operatorFor(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rentDecentraland(
      _assetId: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      _maxRentStart: PromiseOrValue<BigNumberish>,
      _operator: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAdministrativeOperator(
      _administrativeOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAdministrativeState(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateOperator(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      _newOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateState(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    administrativeOperator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clearEstateLANDOperators(
      _assetIds: PromiseOrValue<BigNumberish>[],
      _landIds: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    listDecentraland(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _metaverseRegistry: PromiseOrValue<string>,
      _metaverseAssetId: PromiseOrValue<BigNumberish>,
      _minPeriod: PromiseOrValue<BigNumberish>,
      _maxPeriod: PromiseOrValue<BigNumberish>,
      _maxFutureTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _pricePerSecond: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    operatorFor(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rentDecentraland(
      _assetId: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      _maxRentStart: PromiseOrValue<BigNumberish>,
      _operator: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAdministrativeOperator(
      _administrativeOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAdministrativeState(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateOperator(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      _newOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateState(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
