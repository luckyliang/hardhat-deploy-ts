/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IRentableInterface extends utils.Interface {
  functions: {};

  events: {
    "AccrueReferralFee(uint256,uint256,address,address,uint256)": EventFragment;
    "Rent(uint256,uint256,address,uint256,uint256,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccrueReferralFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rent"): EventFragment;
}

export interface AccrueReferralFeeEventObject {
  _assetId: BigNumber;
  _rentId: BigNumber;
  _referrer: string;
  _paymentToken: string;
  _fee: BigNumber;
}
export type AccrueReferralFeeEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber],
  AccrueReferralFeeEventObject
>;

export type AccrueReferralFeeEventFilter =
  TypedEventFilter<AccrueReferralFeeEvent>;

export interface RentEventObject {
  _assetId: BigNumber;
  _rentId: BigNumber;
  _renter: string;
  _start: BigNumber;
  _end: BigNumber;
  _paymentToken: string;
  _rent: BigNumber;
  _protocolFee: BigNumber;
}
export type RentEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ],
  RentEventObject
>;

export type RentEventFilter = TypedEventFilter<RentEvent>;

export interface IRentable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRentableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AccrueReferralFee(uint256,uint256,address,address,uint256)"(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _referrer?: PromiseOrValue<string> | null,
      _paymentToken?: PromiseOrValue<string> | null,
      _fee?: null
    ): AccrueReferralFeeEventFilter;
    AccrueReferralFee(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _referrer?: PromiseOrValue<string> | null,
      _paymentToken?: PromiseOrValue<string> | null,
      _fee?: null
    ): AccrueReferralFeeEventFilter;

    "Rent(uint256,uint256,address,uint256,uint256,address,uint256,uint256)"(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _renter?: PromiseOrValue<string> | null,
      _start?: null,
      _end?: null,
      _paymentToken?: PromiseOrValue<string> | null,
      _rent?: null,
      _protocolFee?: null
    ): RentEventFilter;
    Rent(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _renter?: PromiseOrValue<string> | null,
      _start?: null,
      _end?: null,
      _paymentToken?: PromiseOrValue<string> | null,
      _rent?: null,
      _protocolFee?: null
    ): RentEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
