/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IMetaverseAdditionFacetInterface extends utils.Interface {
  functions: {
    "addMetaverseWithAdapters(uint256,string,address[],address[])": FunctionFragment;
    "addMetaverseWithoutAdapters(uint256,string,address[],address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addMetaverseWithAdapters"
      | "addMetaverseWithoutAdapters"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addMetaverseWithAdapters",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addMetaverseWithoutAdapters",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addMetaverseWithAdapters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMetaverseWithoutAdapters",
    data: BytesLike
  ): Result;

  events: {
    "AdministrativeConsumerUpdated(address,address)": EventFragment;
    "ConsumableAdapterUpdated(address,address)": EventFragment;
    "SetMetaverseName(uint256,string)": EventFragment;
    "SetRegistry(uint256,address,bool)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AdministrativeConsumerUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConsumableAdapterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMetaverseName"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRegistry"): EventFragment;
}

export interface AdministrativeConsumerUpdatedEventObject {
  _metaverseRegistry: string;
  _administrativeConsumer: string;
}
export type AdministrativeConsumerUpdatedEvent = TypedEvent<
  [string, string],
  AdministrativeConsumerUpdatedEventObject
>;

export type AdministrativeConsumerUpdatedEventFilter =
  TypedEventFilter<AdministrativeConsumerUpdatedEvent>;

export interface ConsumableAdapterUpdatedEventObject {
  _metaverseRegistry: string;
  _adapter: string;
}
export type ConsumableAdapterUpdatedEvent = TypedEvent<
  [string, string],
  ConsumableAdapterUpdatedEventObject
>;

export type ConsumableAdapterUpdatedEventFilter =
  TypedEventFilter<ConsumableAdapterUpdatedEvent>;

export interface SetMetaverseNameEventObject {
  _metaverseId: BigNumber;
  _name: string;
}
export type SetMetaverseNameEvent = TypedEvent<
  [BigNumber, string],
  SetMetaverseNameEventObject
>;

export type SetMetaverseNameEventFilter =
  TypedEventFilter<SetMetaverseNameEvent>;

export interface SetRegistryEventObject {
  _metaverseId: BigNumber;
  _registry: string;
  _status: boolean;
}
export type SetRegistryEvent = TypedEvent<
  [BigNumber, string, boolean],
  SetRegistryEventObject
>;

export type SetRegistryEventFilter = TypedEventFilter<SetRegistryEvent>;

export interface IMetaverseAdditionFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMetaverseAdditionFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addMetaverseWithAdapters(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _metaverseRegistries: PromiseOrValue<string>[],
      _administrativeConsumers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addMetaverseWithoutAdapters(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _metaverseRegistries: PromiseOrValue<string>[],
      _administrativeConsumers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addMetaverseWithAdapters(
    _metaverseId: PromiseOrValue<BigNumberish>,
    _name: PromiseOrValue<string>,
    _metaverseRegistries: PromiseOrValue<string>[],
    _administrativeConsumers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addMetaverseWithoutAdapters(
    _metaverseId: PromiseOrValue<BigNumberish>,
    _name: PromiseOrValue<string>,
    _metaverseRegistries: PromiseOrValue<string>[],
    _administrativeConsumers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMetaverseWithAdapters(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _metaverseRegistries: PromiseOrValue<string>[],
      _administrativeConsumers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addMetaverseWithoutAdapters(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _metaverseRegistries: PromiseOrValue<string>[],
      _administrativeConsumers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdministrativeConsumerUpdated(address,address)"(
      _metaverseRegistry?: PromiseOrValue<string> | null,
      _administrativeConsumer?: PromiseOrValue<string> | null
    ): AdministrativeConsumerUpdatedEventFilter;
    AdministrativeConsumerUpdated(
      _metaverseRegistry?: PromiseOrValue<string> | null,
      _administrativeConsumer?: PromiseOrValue<string> | null
    ): AdministrativeConsumerUpdatedEventFilter;

    "ConsumableAdapterUpdated(address,address)"(
      _metaverseRegistry?: PromiseOrValue<string> | null,
      _adapter?: PromiseOrValue<string> | null
    ): ConsumableAdapterUpdatedEventFilter;
    ConsumableAdapterUpdated(
      _metaverseRegistry?: PromiseOrValue<string> | null,
      _adapter?: PromiseOrValue<string> | null
    ): ConsumableAdapterUpdatedEventFilter;

    "SetMetaverseName(uint256,string)"(
      _metaverseId?: PromiseOrValue<BigNumberish> | null,
      _name?: null
    ): SetMetaverseNameEventFilter;
    SetMetaverseName(
      _metaverseId?: PromiseOrValue<BigNumberish> | null,
      _name?: null
    ): SetMetaverseNameEventFilter;

    "SetRegistry(uint256,address,bool)"(
      _metaverseId?: PromiseOrValue<BigNumberish> | null,
      _registry?: null,
      _status?: null
    ): SetRegistryEventFilter;
    SetRegistry(
      _metaverseId?: PromiseOrValue<BigNumberish> | null,
      _registry?: null,
      _status?: null
    ): SetRegistryEventFilter;
  };

  estimateGas: {
    addMetaverseWithAdapters(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _metaverseRegistries: PromiseOrValue<string>[],
      _administrativeConsumers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addMetaverseWithoutAdapters(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _metaverseRegistries: PromiseOrValue<string>[],
      _administrativeConsumers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMetaverseWithAdapters(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _metaverseRegistries: PromiseOrValue<string>[],
      _administrativeConsumers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addMetaverseWithoutAdapters(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _metaverseRegistries: PromiseOrValue<string>[],
      _administrativeConsumers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
