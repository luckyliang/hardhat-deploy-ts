/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface WyvernExchangeInterface extends utils.Interface {
  functions: {
    "approveFor(address,bool)": FunctionFragment;
    "approveOrderHash_(bytes32)": FunctionFragment;
    "approveOrder_(address,address,address,bytes4,bytes,uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "approved(address,bytes32)": FunctionFragment;
    "atomicMatch_(uint256[16],bytes4[2],bytes,bytes,bytes,bytes,uint8[2],bytes32,bytes)": FunctionFragment;
    "attack()": FunctionFragment;
    "fills(address,bytes32)": FunctionFragment;
    "hashOrder_(address,address,address,bytes4,bytes,uint256,uint256,uint256,uint256)": FunctionFragment;
    "hashToSign_(bytes32)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "registries(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setOrderFill_(bytes32,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "validateOrderAuthorization_(bytes32,address,bytes)": FunctionFragment;
    "validateOrderParameters_(address,address,address,bytes4,bytes,uint256,uint256,uint256,uint256)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveFor"
      | "approveOrderHash_"
      | "approveOrder_"
      | "approved"
      | "atomicMatch_"
      | "attack"
      | "fills"
      | "hashOrder_"
      | "hashToSign_"
      | "name"
      | "owner"
      | "registries"
      | "renounceOwnership"
      | "setOrderFill_"
      | "transferOwnership"
      | "validateOrderAuthorization_"
      | "validateOrderParameters_"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveFor",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveOrderHash_",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveOrder_",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approved",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "atomicMatch_",
    values: [
      PromiseOrValue<BigNumberish>[],
      [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "attack", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fills",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hashOrder_",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashToSign_",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registries",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOrderFill_",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateOrderAuthorization_",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateOrderParameters_",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "approveFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveOrderHash_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveOrder_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approved", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "atomicMatch_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "attack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fills", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hashOrder_", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashToSign_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registries", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOrderFill_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateOrderAuthorization_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateOrderParameters_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "OrderApproved(bytes32,address,address,address,bytes4,bytes,uint256,uint256,uint256,uint256,bool)": EventFragment;
    "OrderFillChanged(bytes32,address,uint256)": EventFragment;
    "OrdersMatched(bytes32,bytes32,address,address,uint256,uint256,bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OrderApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderFillChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrdersMatched"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OrderApprovedEventObject {
  hash: string;
  registry: string;
  maker: string;
  staticTarget: string;
  staticSelector: string;
  staticExtradata: string;
  maximumFill: BigNumber;
  listingTime: BigNumber;
  expirationTime: BigNumber;
  salt: BigNumber;
  orderbookInclusionDesired: boolean;
}
export type OrderApprovedEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ],
  OrderApprovedEventObject
>;

export type OrderApprovedEventFilter = TypedEventFilter<OrderApprovedEvent>;

export interface OrderFillChangedEventObject {
  hash: string;
  maker: string;
  newFill: BigNumber;
}
export type OrderFillChangedEvent = TypedEvent<
  [string, string, BigNumber],
  OrderFillChangedEventObject
>;

export type OrderFillChangedEventFilter =
  TypedEventFilter<OrderFillChangedEvent>;

export interface OrdersMatchedEventObject {
  firstHash: string;
  secondHash: string;
  firstMaker: string;
  secondMaker: string;
  newFirstFill: BigNumber;
  newSecondFill: BigNumber;
  metadata: string;
}
export type OrdersMatchedEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, string],
  OrdersMatchedEventObject
>;

export type OrdersMatchedEventFilter = TypedEventFilter<OrdersMatchedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface WyvernExchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WyvernExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveFor(
      registry: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveOrderHash_(
      hash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveOrder_(
      registry: PromiseOrValue<string>,
      maker: PromiseOrValue<string>,
      staticTarget: PromiseOrValue<string>,
      staticSelector: PromiseOrValue<BytesLike>,
      staticExtradata: PromiseOrValue<BytesLike>,
      maximumFill: PromiseOrValue<BigNumberish>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      orderbookInclusionDesired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approved(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    atomicMatch_(
      uints: PromiseOrValue<BigNumberish>[],
      staticSelectors: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      firstExtradata: PromiseOrValue<BytesLike>,
      firstCalldata: PromiseOrValue<BytesLike>,
      secondExtradata: PromiseOrValue<BytesLike>,
      secondCalldata: PromiseOrValue<BytesLike>,
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      metadata: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    attack(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fills(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashOrder_(
      registry: PromiseOrValue<string>,
      maker: PromiseOrValue<string>,
      staticTarget: PromiseOrValue<string>,
      staticSelector: PromiseOrValue<BytesLike>,
      staticExtradata: PromiseOrValue<BytesLike>,
      maximumFill: PromiseOrValue<BigNumberish>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { hash: string }>;

    hashToSign_(
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { hash: string }>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registries(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOrderFill_(
      hash: PromiseOrValue<BytesLike>,
      fill: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateOrderAuthorization_(
      hash: PromiseOrValue<BytesLike>,
      maker: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    validateOrderParameters_(
      registry: PromiseOrValue<string>,
      maker: PromiseOrValue<string>,
      staticTarget: PromiseOrValue<string>,
      staticSelector: PromiseOrValue<BytesLike>,
      staticExtradata: PromiseOrValue<BytesLike>,
      maximumFill: PromiseOrValue<BigNumberish>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  approveFor(
    registry: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveOrderHash_(
    hash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveOrder_(
    registry: PromiseOrValue<string>,
    maker: PromiseOrValue<string>,
    staticTarget: PromiseOrValue<string>,
    staticSelector: PromiseOrValue<BytesLike>,
    staticExtradata: PromiseOrValue<BytesLike>,
    maximumFill: PromiseOrValue<BigNumberish>,
    listingTime: PromiseOrValue<BigNumberish>,
    expirationTime: PromiseOrValue<BigNumberish>,
    salt: PromiseOrValue<BigNumberish>,
    orderbookInclusionDesired: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approved(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  atomicMatch_(
    uints: PromiseOrValue<BigNumberish>[],
    staticSelectors: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
    firstExtradata: PromiseOrValue<BytesLike>,
    firstCalldata: PromiseOrValue<BytesLike>,
    secondExtradata: PromiseOrValue<BytesLike>,
    secondCalldata: PromiseOrValue<BytesLike>,
    howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    metadata: PromiseOrValue<BytesLike>,
    signatures: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  attack(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fills(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashOrder_(
    registry: PromiseOrValue<string>,
    maker: PromiseOrValue<string>,
    staticTarget: PromiseOrValue<string>,
    staticSelector: PromiseOrValue<BytesLike>,
    staticExtradata: PromiseOrValue<BytesLike>,
    maximumFill: PromiseOrValue<BigNumberish>,
    listingTime: PromiseOrValue<BigNumberish>,
    expirationTime: PromiseOrValue<BigNumberish>,
    salt: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  hashToSign_(
    orderHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  registries(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOrderFill_(
    hash: PromiseOrValue<BytesLike>,
    fill: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  zxvalidateOrderAuthorization_(
    hash: PromiseOrValue<BytesLike>,
    maker: PromiseOrValue<string>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  validateOrderParameters_(
    registry: PromiseOrValue<string>,
    maker: PromiseOrValue<string>,
    staticTarget: PromiseOrValue<string>,
    staticSelector: PromiseOrValue<BytesLike>,
    staticExtradata: PromiseOrValue<BytesLike>,
    maximumFill: PromiseOrValue<BigNumberish>,
    listingTime: PromiseOrValue<BigNumberish>,
    expirationTime: PromiseOrValue<BigNumberish>,
    salt: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    approveFor(
      registry: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveOrderHash_(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveOrder_(
      registry: PromiseOrValue<string>,
      maker: PromiseOrValue<string>,
      staticTarget: PromiseOrValue<string>,
      staticSelector: PromiseOrValue<BytesLike>,
      staticExtradata: PromiseOrValue<BytesLike>,
      maximumFill: PromiseOrValue<BigNumberish>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      orderbookInclusionDesired: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    approved(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    atomicMatch_(
      uints: PromiseOrValue<BigNumberish>[],
      staticSelectors: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      firstExtradata: PromiseOrValue<BytesLike>,
      firstCalldata: PromiseOrValue<BytesLike>,
      secondExtradata: PromiseOrValue<BytesLike>,
      secondCalldata: PromiseOrValue<BytesLike>,
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      metadata: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    attack(overrides?: CallOverrides): Promise<void>;

    fills(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashOrder_(
      registry: PromiseOrValue<string>,
      maker: PromiseOrValue<string>,
      staticTarget: PromiseOrValue<string>,
      staticSelector: PromiseOrValue<BytesLike>,
      staticExtradata: PromiseOrValue<BytesLike>,
      maximumFill: PromiseOrValue<BigNumberish>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    hashToSign_(
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    registries(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setOrderFill_(
      hash: PromiseOrValue<BytesLike>,
      fill: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateOrderAuthorization_(
      hash: PromiseOrValue<BytesLike>,
      maker: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    validateOrderParameters_(
      registry: PromiseOrValue<string>,
      maker: PromiseOrValue<string>,
      staticTarget: PromiseOrValue<string>,
      staticSelector: PromiseOrValue<BytesLike>,
      staticExtradata: PromiseOrValue<BytesLike>,
      maximumFill: PromiseOrValue<BigNumberish>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OrderApproved(bytes32,address,address,address,bytes4,bytes,uint256,uint256,uint256,uint256,bool)"(
      hash?: PromiseOrValue<BytesLike> | null,
      registry?: null,
      maker?: PromiseOrValue<string> | null,
      staticTarget?: null,
      staticSelector?: null,
      staticExtradata?: null,
      maximumFill?: null,
      listingTime?: null,
      expirationTime?: null,
      salt?: null,
      orderbookInclusionDesired?: null
    ): OrderApprovedEventFilter;
    OrderApproved(
      hash?: PromiseOrValue<BytesLike> | null,
      registry?: null,
      maker?: PromiseOrValue<string> | null,
      staticTarget?: null,
      staticSelector?: null,
      staticExtradata?: null,
      maximumFill?: null,
      listingTime?: null,
      expirationTime?: null,
      salt?: null,
      orderbookInclusionDesired?: null
    ): OrderApprovedEventFilter;

    "OrderFillChanged(bytes32,address,uint256)"(
      hash?: PromiseOrValue<BytesLike> | null,
      maker?: PromiseOrValue<string> | null,
      newFill?: null
    ): OrderFillChangedEventFilter;
    OrderFillChanged(
      hash?: PromiseOrValue<BytesLike> | null,
      maker?: PromiseOrValue<string> | null,
      newFill?: null
    ): OrderFillChangedEventFilter;

    "OrdersMatched(bytes32,bytes32,address,address,uint256,uint256,bytes32)"(
      firstHash?: null,
      secondHash?: null,
      firstMaker?: PromiseOrValue<string> | null,
      secondMaker?: PromiseOrValue<string> | null,
      newFirstFill?: null,
      newSecondFill?: null,
      metadata?: PromiseOrValue<BytesLike> | null
    ): OrdersMatchedEventFilter;
    OrdersMatched(
      firstHash?: null,
      secondHash?: null,
      firstMaker?: PromiseOrValue<string> | null,
      secondMaker?: PromiseOrValue<string> | null,
      newFirstFill?: null,
      newSecondFill?: null,
      metadata?: PromiseOrValue<BytesLike> | null
    ): OrdersMatchedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    approveFor(
      registry: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveOrderHash_(
      hash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveOrder_(
      registry: PromiseOrValue<string>,
      maker: PromiseOrValue<string>,
      staticTarget: PromiseOrValue<string>,
      staticSelector: PromiseOrValue<BytesLike>,
      staticExtradata: PromiseOrValue<BytesLike>,
      maximumFill: PromiseOrValue<BigNumberish>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      orderbookInclusionDesired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approved(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    atomicMatch_(
      uints: PromiseOrValue<BigNumberish>[],
      staticSelectors: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      firstExtradata: PromiseOrValue<BytesLike>,
      firstCalldata: PromiseOrValue<BytesLike>,
      secondExtradata: PromiseOrValue<BytesLike>,
      secondCalldata: PromiseOrValue<BytesLike>,
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      metadata: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    attack(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fills(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashOrder_(
      registry: PromiseOrValue<string>,
      maker: PromiseOrValue<string>,
      staticTarget: PromiseOrValue<string>,
      staticSelector: PromiseOrValue<BytesLike>,
      staticExtradata: PromiseOrValue<BytesLike>,
      maximumFill: PromiseOrValue<BigNumberish>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashToSign_(
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registries(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOrderFill_(
      hash: PromiseOrValue<BytesLike>,
      fill: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateOrderAuthorization_(
      hash: PromiseOrValue<BytesLike>,
      maker: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateOrderParameters_(
      registry: PromiseOrValue<string>,
      maker: PromiseOrValue<string>,
      staticTarget: PromiseOrValue<string>,
      staticSelector: PromiseOrValue<BytesLike>,
      staticExtradata: PromiseOrValue<BytesLike>,
      maximumFill: PromiseOrValue<BigNumberish>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    approveFor(
      registry: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveOrderHash_(
      hash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveOrder_(
      registry: PromiseOrValue<string>,
      maker: PromiseOrValue<string>,
      staticTarget: PromiseOrValue<string>,
      staticSelector: PromiseOrValue<BytesLike>,
      staticExtradata: PromiseOrValue<BytesLike>,
      maximumFill: PromiseOrValue<BigNumberish>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      orderbookInclusionDesired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approved(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    atomicMatch_(
      uints: PromiseOrValue<BigNumberish>[],
      staticSelectors: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      firstExtradata: PromiseOrValue<BytesLike>,
      firstCalldata: PromiseOrValue<BytesLike>,
      secondExtradata: PromiseOrValue<BytesLike>,
      secondCalldata: PromiseOrValue<BytesLike>,
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      metadata: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    attack(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fills(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashOrder_(
      registry: PromiseOrValue<string>,
      maker: PromiseOrValue<string>,
      staticTarget: PromiseOrValue<string>,
      staticSelector: PromiseOrValue<BytesLike>,
      staticExtradata: PromiseOrValue<BytesLike>,
      maximumFill: PromiseOrValue<BigNumberish>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashToSign_(
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registries(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOrderFill_(
      hash: PromiseOrValue<BytesLike>,
      fill: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateOrderAuthorization_(
      hash: PromiseOrValue<BytesLike>,
      maker: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateOrderParameters_(
      registry: PromiseOrValue<string>,
      maker: PromiseOrValue<string>,
      staticTarget: PromiseOrValue<string>,
      staticSelector: PromiseOrValue<BytesLike>,
      staticExtradata: PromiseOrValue<BytesLike>,
      maximumFill: PromiseOrValue<BigNumberish>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
