/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IDiamondCut {
  export type FacetCutStruct = {
    facetAddress: PromiseOrValue<string>;
    action: PromiseOrValue<BigNumberish>;
    functionSelectors: PromiseOrValue<BytesLike>[];
  };

  export type FacetCutStructOutput = [string, number, string[]] & {
    facetAddress: string;
    action: number;
    functionSelectors: string[];
  };
}

export declare namespace LibMarketplace {
  export type AssetStruct = {
    metaverseId: PromiseOrValue<BigNumberish>;
    metaverseRegistry: PromiseOrValue<string>;
    metaverseAssetId: PromiseOrValue<BigNumberish>;
    paymentToken: PromiseOrValue<string>;
    minPeriod: PromiseOrValue<BigNumberish>;
    maxPeriod: PromiseOrValue<BigNumberish>;
    maxFutureTime: PromiseOrValue<BigNumberish>;
    pricePerSecond: PromiseOrValue<BigNumberish>;
    totalRents: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type AssetStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ] & {
    metaverseId: BigNumber;
    metaverseRegistry: string;
    metaverseAssetId: BigNumber;
    paymentToken: string;
    minPeriod: BigNumber;
    maxPeriod: BigNumber;
    maxFutureTime: BigNumber;
    pricePerSecond: BigNumber;
    totalRents: BigNumber;
    status: number;
  };

  export type RentStruct = {
    renter: PromiseOrValue<string>;
    start: PromiseOrValue<BigNumberish>;
    end: PromiseOrValue<BigNumberish>;
  };

  export type RentStructOutput = [string, BigNumber, BigNumber] & {
    renter: string;
    start: BigNumber;
    end: BigNumber;
  };
}

export declare namespace IDiamondLoupe {
  export type FacetStruct = {
    facetAddress: PromiseOrValue<string>;
    functionSelectors: PromiseOrValue<BytesLike>[];
  };

  export type FacetStructOutput = [string, string[]] & {
    facetAddress: string;
    functionSelectors: string[];
  };
}

export declare namespace LibReferral {
  export type MetaverseRegistryReferrerStruct = {
    referrer: PromiseOrValue<string>;
    percentage: PromiseOrValue<BigNumberish>;
  };

  export type MetaverseRegistryReferrerStructOutput = [string, number] & {
    referrer: string;
    percentage: number;
  };

  export type ReferrerPercentageStruct = {
    mainPercentage: PromiseOrValue<BigNumberish>;
    secondaryPercentage: PromiseOrValue<BigNumberish>;
  };

  export type ReferrerPercentageStructOutput = [number, number] & {
    mainPercentage: number;
    secondaryPercentage: number;
  };
}

export interface ILandWorksInterface extends utils.Interface {
  functions: {
    "administrativeConsumer(address)": FunctionFragment;
    "administrativeOperator()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "assetAt(uint256)": FunctionFragment;
    "assetRentFeesFor(uint256,address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseURI()": FunctionFragment;
    "calculateRentFee(uint256,uint256,address)": FunctionFragment;
    "changeConsumer(address,uint256)": FunctionFragment;
    "claimMultipleReferrerFees(address[])": FunctionFragment;
    "claimMultipleRentFees(uint256[])": FunctionFragment;
    "claimProtocolFee(address)": FunctionFragment;
    "claimProtocolFees(address[])": FunctionFragment;
    "claimReferrerFee(address)": FunctionFragment;
    "claimRentFee(uint256)": FunctionFragment;
    "clearEstateLANDOperators(uint256[],uint256[][])": FunctionFragment;
    "consumableAdapter(address)": FunctionFragment;
    "consumerOf(uint256)": FunctionFragment;
    "delist(uint256)": FunctionFragment;
    "diamondCut((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "feePercentage(address)": FunctionFragment;
    "feePrecision()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "initERC721(string,string,string)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "list(uint256,address,uint256,uint256,uint256,uint256,address,uint256,address)": FunctionFragment;
    "listDecentraland(uint256,address,uint256,uint256,uint256,uint256,address,uint256,address)": FunctionFragment;
    "listWithConsumableAdapter(uint256,address,uint256,uint256,uint256,uint256,address,uint256,address)": FunctionFragment;
    "metaverseName(uint256)": FunctionFragment;
    "metaverseRegistryReferrer(address)": FunctionFragment;
    "name()": FunctionFragment;
    "operatorFor(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "protocolFeeFor(address)": FunctionFragment;
    "referralAdmin()": FunctionFragment;
    "referrerFee(address,address)": FunctionFragment;
    "referrerPercentage(address)": FunctionFragment;
    "registryAt(uint256,uint256)": FunctionFragment;
    "rent(uint256,uint256,uint256,address,uint256,address)": FunctionFragment;
    "rentAt(uint256,uint256)": FunctionFragment;
    "rentConsumer(uint256,uint256)": FunctionFragment;
    "rentDecentraland(uint256,uint256,uint256,address,address,uint256,address)": FunctionFragment;
    "rentWithConsumer(uint256,uint256,uint256,address,address,uint256,address)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setAdministrativeConsumerFor(address,address)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setConsumableAdapter(address,address)": FunctionFragment;
    "setFee(address,uint256)": FunctionFragment;
    "setMetaverseName(uint256,string)": FunctionFragment;
    "setMetaverseRegistryReferrers(address[],address[],uint24[])": FunctionFragment;
    "setReferralAdmin(address)": FunctionFragment;
    "setReferrers(address[],uint24[],uint24[])": FunctionFragment;
    "setRegistry(uint256,address,bool)": FunctionFragment;
    "setTokenPayment(address,uint256,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "supportsRegistry(uint256,address)": FunctionFragment;
    "supportsTokenPayment(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenPaymentAt(uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalRegistries(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalTokenPayments()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAdapterAdministrativeState(uint256)": FunctionFragment;
    "updateAdapterState(uint256,uint256)": FunctionFragment;
    "updateAdministrativeOperator(address)": FunctionFragment;
    "updateAdministrativeState(uint256)": FunctionFragment;
    "updateConditions(uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "updateConsumer(uint256,uint256,address)": FunctionFragment;
    "updateOperator(uint256,uint256,address)": FunctionFragment;
    "updateState(uint256,uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "administrativeConsumer"
      | "administrativeOperator"
      | "approve"
      | "assetAt"
      | "assetRentFeesFor"
      | "balanceOf"
      | "baseURI"
      | "calculateRentFee"
      | "changeConsumer"
      | "claimMultipleReferrerFees"
      | "claimMultipleRentFees"
      | "claimProtocolFee"
      | "claimProtocolFees"
      | "claimReferrerFee"
      | "claimRentFee"
      | "clearEstateLANDOperators"
      | "consumableAdapter"
      | "consumerOf"
      | "delist"
      | "diamondCut"
      | "facetAddress"
      | "facetAddresses"
      | "facetFunctionSelectors"
      | "facets"
      | "feePercentage"
      | "feePrecision"
      | "getApproved"
      | "initERC721"
      | "isApprovedForAll"
      | "list"
      | "listDecentraland"
      | "listWithConsumableAdapter"
      | "metaverseName"
      | "metaverseRegistryReferrer"
      | "name"
      | "operatorFor"
      | "owner"
      | "ownerOf"
      | "protocolFeeFor"
      | "referralAdmin"
      | "referrerFee"
      | "referrerPercentage"
      | "registryAt"
      | "rent"
      | "rentAt"
      | "rentConsumer"
      | "rentDecentraland"
      | "rentWithConsumer"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setAdministrativeConsumerFor"
      | "setApprovalForAll"
      | "setBaseURI"
      | "setConsumableAdapter"
      | "setFee"
      | "setMetaverseName"
      | "setMetaverseRegistryReferrers"
      | "setReferralAdmin"
      | "setReferrers"
      | "setRegistry"
      | "setTokenPayment"
      | "supportsInterface"
      | "supportsRegistry"
      | "supportsTokenPayment"
      | "symbol"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenPaymentAt"
      | "tokenURI"
      | "totalRegistries"
      | "totalSupply"
      | "totalTokenPayments"
      | "transferFrom"
      | "transferOwnership"
      | "updateAdapterAdministrativeState"
      | "updateAdapterState"
      | "updateAdministrativeOperator"
      | "updateAdministrativeState"
      | "updateConditions"
      | "updateConsumer"
      | "updateOperator"
      | "updateState"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "administrativeConsumer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "administrativeOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetRentFeesFor",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateRentFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeConsumer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMultipleReferrerFees",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMultipleRentFees",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimProtocolFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimProtocolFees",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReferrerFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRentFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "clearEstateLANDOperators",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "consumableAdapter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "consumerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "delist",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [
      IDiamondCut.FacetCutStruct[],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feePercentage",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "feePrecision",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initERC721",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "list",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listDecentraland",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listWithConsumableAdapter",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "metaverseName",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "metaverseRegistryReferrer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "operatorFor",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeFor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "referralAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referrerFee",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "referrerPercentage",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registryAt",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rent",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rentAt",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rentConsumer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rentDecentraland",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rentWithConsumer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdministrativeConsumerFor",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setConsumableAdapter",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetaverseName",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetaverseRegistryReferrers",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferralAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferrers",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistry",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenPayment",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsRegistry",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsTokenPayment",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPaymentAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRegistries",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTokenPayments",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAdapterAdministrativeState",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAdapterState",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAdministrativeOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAdministrativeState",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConditions",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConsumer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOperator",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateState",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "administrativeConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "administrativeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assetAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetRentFeesFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateRentFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimMultipleReferrerFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimMultipleRentFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimProtocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReferrerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRentFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearEstateLANDOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumableAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "consumerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feePrecision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initERC721", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listDecentraland",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listWithConsumableAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metaverseName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metaverseRegistryReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operatorFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referrerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referrerPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registryAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rentAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rentConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rentDecentraland",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rentWithConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdministrativeConsumerFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setConsumableAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMetaverseName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetaverseRegistryReferrers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferralAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferrers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsTokenPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenPaymentAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalRegistries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTokenPayments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAdapterAdministrativeState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAdapterState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAdministrativeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAdministrativeState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AccrueReferralFee(uint256,uint256,address,address,uint256)": EventFragment;
    "AdministrativeConsumerUpdated(address,address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ClaimProtocolFee(address,address,uint256)": EventFragment;
    "ClaimReferrerFee(address,address,uint256)": EventFragment;
    "ClaimRentFee(uint256,address,address,uint256)": EventFragment;
    "ConsumableAdapterUpdated(address,address)": EventFragment;
    "ConsumerChanged(address,address,uint256)": EventFragment;
    "Delist(uint256,address)": EventFragment;
    "DiamondCut(tuple[],address,bytes)": EventFragment;
    "List(uint256,uint256,address,uint256,uint256,uint256,uint256,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Rent(uint256,uint256,address,uint256,uint256,address,uint256,uint256)": EventFragment;
    "SetBaseURI(string)": EventFragment;
    "SetFee(address,uint256)": EventFragment;
    "SetMetaverseName(uint256,string)": EventFragment;
    "SetMetaverseRegistryReferrer(address,address,uint24)": EventFragment;
    "SetReferralAdmin(address)": EventFragment;
    "SetReferrer(address,uint24,uint24)": EventFragment;
    "SetRegistry(uint256,address,bool)": EventFragment;
    "SetTokenPayment(address,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UpdateAdapterAdministrativeConsumer(uint256,address,address)": EventFragment;
    "UpdateAdapterConsumer(uint256,uint256,address,address)": EventFragment;
    "UpdateAdministrativeOperator(address)": EventFragment;
    "UpdateAdministrativeState(uint256,address)": EventFragment;
    "UpdateConditions(uint256,uint256,uint256,uint256,address,uint256)": EventFragment;
    "UpdateOperator(uint256,uint256,address)": EventFragment;
    "UpdateRentConsumer(uint256,uint256,address)": EventFragment;
    "UpdateState(uint256,uint256,address)": EventFragment;
    "Withdraw(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccrueReferralFee"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AdministrativeConsumerUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimProtocolFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimReferrerFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimRentFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConsumableAdapterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConsumerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Delist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiamondCut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "List"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBaseURI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMetaverseName"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetMetaverseRegistryReferrer"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetReferralAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetReferrer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRegistry"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenPayment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateAdapterAdministrativeConsumer"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateAdapterConsumer"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateAdministrativeOperator"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateAdministrativeState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateConditions"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateRentConsumer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface AccrueReferralFeeEventObject {
  _assetId: BigNumber;
  _rentId: BigNumber;
  _referrer: string;
  _paymentToken: string;
  _fee: BigNumber;
}
export type AccrueReferralFeeEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber],
  AccrueReferralFeeEventObject
>;

export type AccrueReferralFeeEventFilter =
  TypedEventFilter<AccrueReferralFeeEvent>;

export interface AdministrativeConsumerUpdatedEventObject {
  _metaverseRegistry: string;
  _administrativeConsumer: string;
}
export type AdministrativeConsumerUpdatedEvent = TypedEvent<
  [string, string],
  AdministrativeConsumerUpdatedEventObject
>;

export type AdministrativeConsumerUpdatedEventFilter =
  TypedEventFilter<AdministrativeConsumerUpdatedEvent>;

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface ClaimProtocolFeeEventObject {
  _token: string;
  _recipient: string;
  _amount: BigNumber;
}
export type ClaimProtocolFeeEvent = TypedEvent<
  [string, string, BigNumber],
  ClaimProtocolFeeEventObject
>;

export type ClaimProtocolFeeEventFilter =
  TypedEventFilter<ClaimProtocolFeeEvent>;

export interface ClaimReferrerFeeEventObject {
  _claimer: string;
  _token: string;
  _amount: BigNumber;
}
export type ClaimReferrerFeeEvent = TypedEvent<
  [string, string, BigNumber],
  ClaimReferrerFeeEventObject
>;

export type ClaimReferrerFeeEventFilter =
  TypedEventFilter<ClaimReferrerFeeEvent>;

export interface ClaimRentFeeEventObject {
  _assetId: BigNumber;
  _token: string;
  _recipient: string;
  _amount: BigNumber;
}
export type ClaimRentFeeEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  ClaimRentFeeEventObject
>;

export type ClaimRentFeeEventFilter = TypedEventFilter<ClaimRentFeeEvent>;

export interface ConsumableAdapterUpdatedEventObject {
  _metaverseRegistry: string;
  _adapter: string;
}
export type ConsumableAdapterUpdatedEvent = TypedEvent<
  [string, string],
  ConsumableAdapterUpdatedEventObject
>;

export type ConsumableAdapterUpdatedEventFilter =
  TypedEventFilter<ConsumableAdapterUpdatedEvent>;

export interface ConsumerChangedEventObject {
  owner: string;
  consumer: string;
  tokenId: BigNumber;
}
export type ConsumerChangedEvent = TypedEvent<
  [string, string, BigNumber],
  ConsumerChangedEventObject
>;

export type ConsumerChangedEventFilter = TypedEventFilter<ConsumerChangedEvent>;

export interface DelistEventObject {
  _assetId: BigNumber;
  _caller: string;
}
export type DelistEvent = TypedEvent<[BigNumber, string], DelistEventObject>;

export type DelistEventFilter = TypedEventFilter<DelistEvent>;

export interface DiamondCutEventObject {
  _diamondCut: IDiamondCut.FacetCutStructOutput[];
  _init: string;
  _calldata: string;
}
export type DiamondCutEvent = TypedEvent<
  [IDiamondCut.FacetCutStructOutput[], string, string],
  DiamondCutEventObject
>;

export type DiamondCutEventFilter = TypedEventFilter<DiamondCutEvent>;

export interface ListEventObject {
  _assetId: BigNumber;
  _metaverseId: BigNumber;
  _metaverseRegistry: string;
  _metaverseAssetId: BigNumber;
  _minPeriod: BigNumber;
  _maxPeriod: BigNumber;
  _maxFutureTime: BigNumber;
  _paymentToken: string;
  _pricePerSecond: BigNumber;
}
export type ListEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ],
  ListEventObject
>;

export type ListEventFilter = TypedEventFilter<ListEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RentEventObject {
  _assetId: BigNumber;
  _rentId: BigNumber;
  _renter: string;
  _start: BigNumber;
  _end: BigNumber;
  _paymentToken: string;
  _rent: BigNumber;
  _protocolFee: BigNumber;
}
export type RentEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ],
  RentEventObject
>;

export type RentEventFilter = TypedEventFilter<RentEvent>;

export interface SetBaseURIEventObject {
  _baseURI: string;
}
export type SetBaseURIEvent = TypedEvent<[string], SetBaseURIEventObject>;

export type SetBaseURIEventFilter = TypedEventFilter<SetBaseURIEvent>;

export interface SetFeeEventObject {
  _token: string;
  _fee: BigNumber;
}
export type SetFeeEvent = TypedEvent<[string, BigNumber], SetFeeEventObject>;

export type SetFeeEventFilter = TypedEventFilter<SetFeeEvent>;

export interface SetMetaverseNameEventObject {
  _metaverseId: BigNumber;
  _name: string;
}
export type SetMetaverseNameEvent = TypedEvent<
  [BigNumber, string],
  SetMetaverseNameEventObject
>;

export type SetMetaverseNameEventFilter =
  TypedEventFilter<SetMetaverseNameEvent>;

export interface SetMetaverseRegistryReferrerEventObject {
  _metaverseRegistry: string;
  _referrer: string;
  _percentage: number;
}
export type SetMetaverseRegistryReferrerEvent = TypedEvent<
  [string, string, number],
  SetMetaverseRegistryReferrerEventObject
>;

export type SetMetaverseRegistryReferrerEventFilter =
  TypedEventFilter<SetMetaverseRegistryReferrerEvent>;

export interface SetReferralAdminEventObject {
  _admin: string;
}
export type SetReferralAdminEvent = TypedEvent<
  [string],
  SetReferralAdminEventObject
>;

export type SetReferralAdminEventFilter =
  TypedEventFilter<SetReferralAdminEvent>;

export interface SetReferrerEventObject {
  _referrer: string;
  _mainPercentage: number;
  _secondaryPercentage: number;
}
export type SetReferrerEvent = TypedEvent<
  [string, number, number],
  SetReferrerEventObject
>;

export type SetReferrerEventFilter = TypedEventFilter<SetReferrerEvent>;

export interface SetRegistryEventObject {
  _metaverseId: BigNumber;
  _registry: string;
  _status: boolean;
}
export type SetRegistryEvent = TypedEvent<
  [BigNumber, string, boolean],
  SetRegistryEventObject
>;

export type SetRegistryEventFilter = TypedEventFilter<SetRegistryEvent>;

export interface SetTokenPaymentEventObject {
  _token: string;
  _status: boolean;
}
export type SetTokenPaymentEvent = TypedEvent<
  [string, boolean],
  SetTokenPaymentEventObject
>;

export type SetTokenPaymentEventFilter = TypedEventFilter<SetTokenPaymentEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UpdateAdapterAdministrativeConsumerEventObject {
  _assetId: BigNumber;
  _adapter: string;
  _consumer: string;
}
export type UpdateAdapterAdministrativeConsumerEvent = TypedEvent<
  [BigNumber, string, string],
  UpdateAdapterAdministrativeConsumerEventObject
>;

export type UpdateAdapterAdministrativeConsumerEventFilter =
  TypedEventFilter<UpdateAdapterAdministrativeConsumerEvent>;

export interface UpdateAdapterConsumerEventObject {
  _assetId: BigNumber;
  _rentId: BigNumber;
  _adapter: string;
  _consumer: string;
}
export type UpdateAdapterConsumerEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  UpdateAdapterConsumerEventObject
>;

export type UpdateAdapterConsumerEventFilter =
  TypedEventFilter<UpdateAdapterConsumerEvent>;

export interface UpdateAdministrativeOperatorEventObject {
  _administrativeOperator: string;
}
export type UpdateAdministrativeOperatorEvent = TypedEvent<
  [string],
  UpdateAdministrativeOperatorEventObject
>;

export type UpdateAdministrativeOperatorEventFilter =
  TypedEventFilter<UpdateAdministrativeOperatorEvent>;

export interface UpdateAdministrativeStateEventObject {
  _assetId: BigNumber;
  _operator: string;
}
export type UpdateAdministrativeStateEvent = TypedEvent<
  [BigNumber, string],
  UpdateAdministrativeStateEventObject
>;

export type UpdateAdministrativeStateEventFilter =
  TypedEventFilter<UpdateAdministrativeStateEvent>;

export interface UpdateConditionsEventObject {
  _assetId: BigNumber;
  _minPeriod: BigNumber;
  _maxPeriod: BigNumber;
  _maxFutureTime: BigNumber;
  _paymentToken: string;
  _pricePerSecond: BigNumber;
}
export type UpdateConditionsEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber],
  UpdateConditionsEventObject
>;

export type UpdateConditionsEventFilter =
  TypedEventFilter<UpdateConditionsEvent>;

export interface UpdateOperatorEventObject {
  _assetId: BigNumber;
  _rentId: BigNumber;
  _operator: string;
}
export type UpdateOperatorEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  UpdateOperatorEventObject
>;

export type UpdateOperatorEventFilter = TypedEventFilter<UpdateOperatorEvent>;

export interface UpdateRentConsumerEventObject {
  _assetId: BigNumber;
  _rentId: BigNumber;
  _consumer: string;
}
export type UpdateRentConsumerEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  UpdateRentConsumerEventObject
>;

export type UpdateRentConsumerEventFilter =
  TypedEventFilter<UpdateRentConsumerEvent>;

export interface UpdateStateEventObject {
  _assetId: BigNumber;
  _rentId: BigNumber;
  _operator: string;
}
export type UpdateStateEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  UpdateStateEventObject
>;

export type UpdateStateEventFilter = TypedEventFilter<UpdateStateEvent>;

export interface WithdrawEventObject {
  _assetId: BigNumber;
  _caller: string;
}
export type WithdrawEvent = TypedEvent<
  [BigNumber, string],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface ILandWorks extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILandWorksInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    administrativeConsumer(
      _metaverseRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    administrativeOperator(overrides?: CallOverrides): Promise<[string]>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assetAt(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[LibMarketplace.AssetStructOutput]>;

    assetRentFeesFor(
      _assetId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    calculateRentFee(
      _assetId: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { paymentToken_: string; amount_: BigNumber }
    >;

    changeConsumer(
      _consumer: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimMultipleReferrerFees(
      _paymentTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimMultipleRentFees(
      _assetIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimProtocolFee(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimProtocolFees(
      _tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimReferrerFee(
      _paymentToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimRentFee(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    clearEstateLANDOperators(
      _assetIds: PromiseOrValue<BigNumberish>[],
      _landIds: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    consumableAdapter(
      _metaverseRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    consumerOf(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    delist(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    diamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    facetAddress(
      _functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { facetAddress_: string }>;

    facetAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetAddresses_: string[] }>;

    facetFunctionSelectors(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetFunctionSelectors_: string[] }>;

    facets(
      overrides?: CallOverrides
    ): Promise<
      [IDiamondLoupe.FacetStructOutput[]] & {
        facets_: IDiamondLoupe.FacetStructOutput[];
      }
    >;

    feePercentage(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    feePrecision(overrides?: CallOverrides): Promise<[BigNumber]>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { operator: string }>;

    initERC721(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    list(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _metaverseRegistry: PromiseOrValue<string>,
      _metaverseAssetId: PromiseOrValue<BigNumberish>,
      _minPeriod: PromiseOrValue<BigNumberish>,
      _maxPeriod: PromiseOrValue<BigNumberish>,
      _maxFutureTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _pricePerSecond: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    listDecentraland(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _metaverseRegistry: PromiseOrValue<string>,
      _metaverseAssetId: PromiseOrValue<BigNumberish>,
      _minPeriod: PromiseOrValue<BigNumberish>,
      _maxPeriod: PromiseOrValue<BigNumberish>,
      _maxFutureTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _pricePerSecond: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    listWithConsumableAdapter(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _metaverseRegistry: PromiseOrValue<string>,
      _metaverseAssetId: PromiseOrValue<BigNumberish>,
      _minPeriod: PromiseOrValue<BigNumberish>,
      _maxPeriod: PromiseOrValue<BigNumberish>,
      _maxFutureTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _pricePerSecond: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    metaverseName(
      _metaverseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    metaverseRegistryReferrer(
      _metaverseRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[LibReferral.MetaverseRegistryReferrerStructOutput]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    operatorFor(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string] & { owner_: string }>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    protocolFeeFor(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    referralAdmin(overrides?: CallOverrides): Promise<[string]>;

    referrerFee(
      _referrer: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount_: BigNumber }>;

    referrerPercentage(
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[LibReferral.ReferrerPercentageStructOutput]>;

    registryAt(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rent(
      _assetId: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      _maxRentStart: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rentAt(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[LibMarketplace.RentStructOutput]>;

    rentConsumer(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rentDecentraland(
      _assetId: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      _maxRentStart: PromiseOrValue<BigNumberish>,
      _operator: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rentWithConsumer(
      _assetId: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      _maxRentStart: PromiseOrValue<BigNumberish>,
      _consumer: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdministrativeConsumerFor(
      _metaverseRegistry: PromiseOrValue<string>,
      _administrativeConsumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      _baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConsumableAdapter(
      _metaverseRegistry: PromiseOrValue<string>,
      _consumableAdapter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFee(
      _token: PromiseOrValue<string>,
      _feePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMetaverseName(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMetaverseRegistryReferrers(
      _metaverseRegistries: PromiseOrValue<string>[],
      _referrers: PromiseOrValue<string>[],
      _percentages: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReferralAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReferrers(
      _referrers: PromiseOrValue<string>[],
      _mainPercentages: PromiseOrValue<BigNumberish>[],
      _secondaryPercentages: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRegistry(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _registry: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenPayment(
      _token: PromiseOrValue<string>,
      _feePercentage: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    supportsRegistry(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    supportsTokenPayment(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenId: BigNumber }>;

    tokenPaymentAt(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalRegistries(
      _metaverseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalTokenPayments(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAdapterAdministrativeState(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAdapterState(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAdministrativeOperator(
      _administrativeOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAdministrativeState(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateConditions(
      _assetId: PromiseOrValue<BigNumberish>,
      _minPeriod: PromiseOrValue<BigNumberish>,
      _maxPeriod: PromiseOrValue<BigNumberish>,
      _maxFutureTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _pricePerSecond: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateConsumer(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      _newConsumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateOperator(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      _newOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateState(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  administrativeConsumer(
    _metaverseRegistry: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  administrativeOperator(overrides?: CallOverrides): Promise<string>;

  approve(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assetAt(
    _assetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<LibMarketplace.AssetStructOutput>;

  assetRentFeesFor(
    _assetId: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  calculateRentFee(
    _assetId: PromiseOrValue<BigNumberish>,
    _period: PromiseOrValue<BigNumberish>,
    _referrer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { paymentToken_: string; amount_: BigNumber }
  >;

  changeConsumer(
    _consumer: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimMultipleReferrerFees(
    _paymentTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimMultipleRentFees(
    _assetIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimProtocolFee(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimProtocolFees(
    _tokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimReferrerFee(
    _paymentToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimRentFee(
    _assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  clearEstateLANDOperators(
    _assetIds: PromiseOrValue<BigNumberish>[],
    _landIds: PromiseOrValue<BigNumberish>[][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  consumableAdapter(
    _metaverseRegistry: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  consumerOf(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  delist(
    _assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  diamondCut(
    _diamondCut: IDiamondCut.FacetCutStruct[],
    _init: PromiseOrValue<string>,
    _calldata: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  facetAddress(
    _functionSelector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    _facet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(overrides?: CallOverrides): Promise<IDiamondLoupe.FacetStructOutput[]>;

  feePercentage(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  feePrecision(overrides?: CallOverrides): Promise<BigNumber>;

  getApproved(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  initERC721(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _baseURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  list(
    _metaverseId: PromiseOrValue<BigNumberish>,
    _metaverseRegistry: PromiseOrValue<string>,
    _metaverseAssetId: PromiseOrValue<BigNumberish>,
    _minPeriod: PromiseOrValue<BigNumberish>,
    _maxPeriod: PromiseOrValue<BigNumberish>,
    _maxFutureTime: PromiseOrValue<BigNumberish>,
    _paymentToken: PromiseOrValue<string>,
    _pricePerSecond: PromiseOrValue<BigNumberish>,
    _referrer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  listDecentraland(
    _metaverseId: PromiseOrValue<BigNumberish>,
    _metaverseRegistry: PromiseOrValue<string>,
    _metaverseAssetId: PromiseOrValue<BigNumberish>,
    _minPeriod: PromiseOrValue<BigNumberish>,
    _maxPeriod: PromiseOrValue<BigNumberish>,
    _maxFutureTime: PromiseOrValue<BigNumberish>,
    _paymentToken: PromiseOrValue<string>,
    _pricePerSecond: PromiseOrValue<BigNumberish>,
    _referrer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  listWithConsumableAdapter(
    _metaverseId: PromiseOrValue<BigNumberish>,
    _metaverseRegistry: PromiseOrValue<string>,
    _metaverseAssetId: PromiseOrValue<BigNumberish>,
    _minPeriod: PromiseOrValue<BigNumberish>,
    _maxPeriod: PromiseOrValue<BigNumberish>,
    _maxFutureTime: PromiseOrValue<BigNumberish>,
    _paymentToken: PromiseOrValue<string>,
    _pricePerSecond: PromiseOrValue<BigNumberish>,
    _referrer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  metaverseName(
    _metaverseId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  metaverseRegistryReferrer(
    _metaverseRegistry: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<LibReferral.MetaverseRegistryReferrerStructOutput>;

  name(overrides?: CallOverrides): Promise<string>;

  operatorFor(
    _assetId: PromiseOrValue<BigNumberish>,
    _rentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  protocolFeeFor(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  referralAdmin(overrides?: CallOverrides): Promise<string>;

  referrerFee(
    _referrer: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  referrerPercentage(
    _referrer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<LibReferral.ReferrerPercentageStructOutput>;

  registryAt(
    _metaverseId: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  rent(
    _assetId: PromiseOrValue<BigNumberish>,
    _period: PromiseOrValue<BigNumberish>,
    _maxRentStart: PromiseOrValue<BigNumberish>,
    _paymentToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _referrer: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rentAt(
    _assetId: PromiseOrValue<BigNumberish>,
    _rentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<LibMarketplace.RentStructOutput>;

  rentConsumer(
    _assetId: PromiseOrValue<BigNumberish>,
    _rentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  rentDecentraland(
    _assetId: PromiseOrValue<BigNumberish>,
    _period: PromiseOrValue<BigNumberish>,
    _maxRentStart: PromiseOrValue<BigNumberish>,
    _operator: PromiseOrValue<string>,
    _paymentToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _referrer: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rentWithConsumer(
    _assetId: PromiseOrValue<BigNumberish>,
    _period: PromiseOrValue<BigNumberish>,
    _maxRentStart: PromiseOrValue<BigNumberish>,
    _consumer: PromiseOrValue<string>,
    _paymentToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _referrer: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdministrativeConsumerFor(
    _metaverseRegistry: PromiseOrValue<string>,
    _administrativeConsumer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    _approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    _baseURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConsumableAdapter(
    _metaverseRegistry: PromiseOrValue<string>,
    _consumableAdapter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFee(
    _token: PromiseOrValue<string>,
    _feePercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMetaverseName(
    _metaverseId: PromiseOrValue<BigNumberish>,
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMetaverseRegistryReferrers(
    _metaverseRegistries: PromiseOrValue<string>[],
    _referrers: PromiseOrValue<string>[],
    _percentages: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReferralAdmin(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReferrers(
    _referrers: PromiseOrValue<string>[],
    _mainPercentages: PromiseOrValue<BigNumberish>[],
    _secondaryPercentages: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRegistry(
    _metaverseId: PromiseOrValue<BigNumberish>,
    _registry: PromiseOrValue<string>,
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenPayment(
    _token: PromiseOrValue<string>,
    _feePercentage: PromiseOrValue<BigNumberish>,
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  supportsRegistry(
    _metaverseId: PromiseOrValue<BigNumberish>,
    _registry: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  supportsTokenPayment(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenPaymentAt(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  totalRegistries(
    _metaverseId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalTokenPayments(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAdapterAdministrativeState(
    _assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAdapterState(
    _assetId: PromiseOrValue<BigNumberish>,
    _rentId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAdministrativeOperator(
    _administrativeOperator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAdministrativeState(
    _assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateConditions(
    _assetId: PromiseOrValue<BigNumberish>,
    _minPeriod: PromiseOrValue<BigNumberish>,
    _maxPeriod: PromiseOrValue<BigNumberish>,
    _maxFutureTime: PromiseOrValue<BigNumberish>,
    _paymentToken: PromiseOrValue<string>,
    _pricePerSecond: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateConsumer(
    _assetId: PromiseOrValue<BigNumberish>,
    _rentId: PromiseOrValue<BigNumberish>,
    _newConsumer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateOperator(
    _assetId: PromiseOrValue<BigNumberish>,
    _rentId: PromiseOrValue<BigNumberish>,
    _newOperator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateState(
    _assetId: PromiseOrValue<BigNumberish>,
    _rentId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    administrativeConsumer(
      _metaverseRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    administrativeOperator(overrides?: CallOverrides): Promise<string>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    assetAt(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<LibMarketplace.AssetStructOutput>;

    assetRentFeesFor(
      _assetId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    calculateRentFee(
      _assetId: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { paymentToken_: string; amount_: BigNumber }
    >;

    changeConsumer(
      _consumer: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimMultipleReferrerFees(
      _paymentTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimMultipleRentFees(
      _assetIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimProtocolFee(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimProtocolFees(
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimReferrerFee(
      _paymentToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { paymentToken_: string; amount_: BigNumber }
    >;

    claimRentFee(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { paymentToken_: string; rentFee_: BigNumber }
    >;

    clearEstateLANDOperators(
      _assetIds: PromiseOrValue<BigNumberish>[],
      _landIds: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<void>;

    consumableAdapter(
      _metaverseRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    consumerOf(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    delist(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    diamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    facetAddress(
      _functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(
      overrides?: CallOverrides
    ): Promise<IDiamondLoupe.FacetStructOutput[]>;

    feePercentage(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feePrecision(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    initERC721(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _baseURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    list(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _metaverseRegistry: PromiseOrValue<string>,
      _metaverseAssetId: PromiseOrValue<BigNumberish>,
      _minPeriod: PromiseOrValue<BigNumberish>,
      _maxPeriod: PromiseOrValue<BigNumberish>,
      _maxFutureTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _pricePerSecond: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listDecentraland(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _metaverseRegistry: PromiseOrValue<string>,
      _metaverseAssetId: PromiseOrValue<BigNumberish>,
      _minPeriod: PromiseOrValue<BigNumberish>,
      _maxPeriod: PromiseOrValue<BigNumberish>,
      _maxFutureTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _pricePerSecond: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listWithConsumableAdapter(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _metaverseRegistry: PromiseOrValue<string>,
      _metaverseAssetId: PromiseOrValue<BigNumberish>,
      _minPeriod: PromiseOrValue<BigNumberish>,
      _maxPeriod: PromiseOrValue<BigNumberish>,
      _maxFutureTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _pricePerSecond: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metaverseName(
      _metaverseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    metaverseRegistryReferrer(
      _metaverseRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<LibReferral.MetaverseRegistryReferrerStructOutput>;

    name(overrides?: CallOverrides): Promise<string>;

    operatorFor(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    protocolFeeFor(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referralAdmin(overrides?: CallOverrides): Promise<string>;

    referrerFee(
      _referrer: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referrerPercentage(
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<LibReferral.ReferrerPercentageStructOutput>;

    registryAt(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    rent(
      _assetId: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      _maxRentStart: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { rentId_: BigNumber; rentStartsNow_: boolean }
    >;

    rentAt(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<LibMarketplace.RentStructOutput>;

    rentConsumer(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    rentDecentraland(
      _assetId: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      _maxRentStart: PromiseOrValue<BigNumberish>,
      _operator: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { rentId_: BigNumber; rentStartsNow_: boolean }
    >;

    rentWithConsumer(
      _assetId: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      _maxRentStart: PromiseOrValue<BigNumberish>,
      _consumer: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { rentId_: BigNumber; rentStartsNow_: boolean }
    >;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdministrativeConsumerFor(
      _metaverseRegistry: PromiseOrValue<string>,
      _administrativeConsumer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(
      _baseURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setConsumableAdapter(
      _metaverseRegistry: PromiseOrValue<string>,
      _consumableAdapter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(
      _token: PromiseOrValue<string>,
      _feePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetaverseName(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetaverseRegistryReferrers(
      _metaverseRegistries: PromiseOrValue<string>[],
      _referrers: PromiseOrValue<string>[],
      _percentages: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setReferralAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReferrers(
      _referrers: PromiseOrValue<string>[],
      _mainPercentages: PromiseOrValue<BigNumberish>[],
      _secondaryPercentages: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRegistry(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _registry: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenPayment(
      _token: PromiseOrValue<string>,
      _feePercentage: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    supportsRegistry(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    supportsTokenPayment(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenPaymentAt(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalRegistries(
      _metaverseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalTokenPayments(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAdapterAdministrativeState(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAdapterState(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAdministrativeOperator(
      _administrativeOperator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAdministrativeState(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateConditions(
      _assetId: PromiseOrValue<BigNumberish>,
      _minPeriod: PromiseOrValue<BigNumberish>,
      _maxPeriod: PromiseOrValue<BigNumberish>,
      _maxFutureTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _pricePerSecond: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateConsumer(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      _newConsumer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOperator(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      _newOperator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateState(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AccrueReferralFee(uint256,uint256,address,address,uint256)"(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _referrer?: PromiseOrValue<string> | null,
      _paymentToken?: PromiseOrValue<string> | null,
      _fee?: null
    ): AccrueReferralFeeEventFilter;
    AccrueReferralFee(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _referrer?: PromiseOrValue<string> | null,
      _paymentToken?: PromiseOrValue<string> | null,
      _fee?: null
    ): AccrueReferralFeeEventFilter;

    "AdministrativeConsumerUpdated(address,address)"(
      _metaverseRegistry?: PromiseOrValue<string> | null,
      _administrativeConsumer?: PromiseOrValue<string> | null
    ): AdministrativeConsumerUpdatedEventFilter;
    AdministrativeConsumerUpdated(
      _metaverseRegistry?: PromiseOrValue<string> | null,
      _administrativeConsumer?: PromiseOrValue<string> | null
    ): AdministrativeConsumerUpdatedEventFilter;

    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "ClaimProtocolFee(address,address,uint256)"(
      _token?: PromiseOrValue<string> | null,
      _recipient?: PromiseOrValue<string> | null,
      _amount?: null
    ): ClaimProtocolFeeEventFilter;
    ClaimProtocolFee(
      _token?: PromiseOrValue<string> | null,
      _recipient?: PromiseOrValue<string> | null,
      _amount?: null
    ): ClaimProtocolFeeEventFilter;

    "ClaimReferrerFee(address,address,uint256)"(
      _claimer?: PromiseOrValue<string> | null,
      _token?: PromiseOrValue<string> | null,
      _amount?: null
    ): ClaimReferrerFeeEventFilter;
    ClaimReferrerFee(
      _claimer?: PromiseOrValue<string> | null,
      _token?: PromiseOrValue<string> | null,
      _amount?: null
    ): ClaimReferrerFeeEventFilter;

    "ClaimRentFee(uint256,address,address,uint256)"(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _token?: PromiseOrValue<string> | null,
      _recipient?: PromiseOrValue<string> | null,
      _amount?: null
    ): ClaimRentFeeEventFilter;
    ClaimRentFee(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _token?: PromiseOrValue<string> | null,
      _recipient?: PromiseOrValue<string> | null,
      _amount?: null
    ): ClaimRentFeeEventFilter;

    "ConsumableAdapterUpdated(address,address)"(
      _metaverseRegistry?: PromiseOrValue<string> | null,
      _adapter?: PromiseOrValue<string> | null
    ): ConsumableAdapterUpdatedEventFilter;
    ConsumableAdapterUpdated(
      _metaverseRegistry?: PromiseOrValue<string> | null,
      _adapter?: PromiseOrValue<string> | null
    ): ConsumableAdapterUpdatedEventFilter;

    "ConsumerChanged(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      consumer?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ConsumerChangedEventFilter;
    ConsumerChanged(
      owner?: PromiseOrValue<string> | null,
      consumer?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ConsumerChangedEventFilter;

    "Delist(uint256,address)"(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _caller?: PromiseOrValue<string> | null
    ): DelistEventFilter;
    Delist(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _caller?: PromiseOrValue<string> | null
    ): DelistEventFilter;

    "DiamondCut(tuple[],address,bytes)"(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutEventFilter;
    DiamondCut(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutEventFilter;

    "List(uint256,uint256,address,uint256,uint256,uint256,uint256,address,uint256)"(
      _assetId?: null,
      _metaverseId?: null,
      _metaverseRegistry?: PromiseOrValue<string> | null,
      _metaverseAssetId?: PromiseOrValue<BigNumberish> | null,
      _minPeriod?: null,
      _maxPeriod?: null,
      _maxFutureTime?: null,
      _paymentToken?: PromiseOrValue<string> | null,
      _pricePerSecond?: null
    ): ListEventFilter;
    List(
      _assetId?: null,
      _metaverseId?: null,
      _metaverseRegistry?: PromiseOrValue<string> | null,
      _metaverseAssetId?: PromiseOrValue<BigNumberish> | null,
      _minPeriod?: null,
      _maxPeriod?: null,
      _maxFutureTime?: null,
      _paymentToken?: PromiseOrValue<string> | null,
      _pricePerSecond?: null
    ): ListEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Rent(uint256,uint256,address,uint256,uint256,address,uint256,uint256)"(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _renter?: PromiseOrValue<string> | null,
      _start?: null,
      _end?: null,
      _paymentToken?: PromiseOrValue<string> | null,
      _rent?: null,
      _protocolFee?: null
    ): RentEventFilter;
    Rent(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _renter?: PromiseOrValue<string> | null,
      _start?: null,
      _end?: null,
      _paymentToken?: PromiseOrValue<string> | null,
      _rent?: null,
      _protocolFee?: null
    ): RentEventFilter;

    "SetBaseURI(string)"(_baseURI?: null): SetBaseURIEventFilter;
    SetBaseURI(_baseURI?: null): SetBaseURIEventFilter;

    "SetFee(address,uint256)"(
      _token?: PromiseOrValue<string> | null,
      _fee?: null
    ): SetFeeEventFilter;
    SetFee(
      _token?: PromiseOrValue<string> | null,
      _fee?: null
    ): SetFeeEventFilter;

    "SetMetaverseName(uint256,string)"(
      _metaverseId?: PromiseOrValue<BigNumberish> | null,
      _name?: null
    ): SetMetaverseNameEventFilter;
    SetMetaverseName(
      _metaverseId?: PromiseOrValue<BigNumberish> | null,
      _name?: null
    ): SetMetaverseNameEventFilter;

    "SetMetaverseRegistryReferrer(address,address,uint24)"(
      _metaverseRegistry?: PromiseOrValue<string> | null,
      _referrer?: PromiseOrValue<string> | null,
      _percentage?: null
    ): SetMetaverseRegistryReferrerEventFilter;
    SetMetaverseRegistryReferrer(
      _metaverseRegistry?: PromiseOrValue<string> | null,
      _referrer?: PromiseOrValue<string> | null,
      _percentage?: null
    ): SetMetaverseRegistryReferrerEventFilter;

    "SetReferralAdmin(address)"(
      _admin?: PromiseOrValue<string> | null
    ): SetReferralAdminEventFilter;
    SetReferralAdmin(
      _admin?: PromiseOrValue<string> | null
    ): SetReferralAdminEventFilter;

    "SetReferrer(address,uint24,uint24)"(
      _referrer?: PromiseOrValue<string> | null,
      _mainPercentage?: null,
      _secondaryPercentage?: null
    ): SetReferrerEventFilter;
    SetReferrer(
      _referrer?: PromiseOrValue<string> | null,
      _mainPercentage?: null,
      _secondaryPercentage?: null
    ): SetReferrerEventFilter;

    "SetRegistry(uint256,address,bool)"(
      _metaverseId?: PromiseOrValue<BigNumberish> | null,
      _registry?: null,
      _status?: null
    ): SetRegistryEventFilter;
    SetRegistry(
      _metaverseId?: PromiseOrValue<BigNumberish> | null,
      _registry?: null,
      _status?: null
    ): SetRegistryEventFilter;

    "SetTokenPayment(address,bool)"(
      _token?: PromiseOrValue<string> | null,
      _status?: null
    ): SetTokenPaymentEventFilter;
    SetTokenPayment(
      _token?: PromiseOrValue<string> | null,
      _status?: null
    ): SetTokenPaymentEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;

    "UpdateAdapterAdministrativeConsumer(uint256,address,address)"(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _adapter?: PromiseOrValue<string> | null,
      _consumer?: PromiseOrValue<string> | null
    ): UpdateAdapterAdministrativeConsumerEventFilter;
    UpdateAdapterAdministrativeConsumer(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _adapter?: PromiseOrValue<string> | null,
      _consumer?: PromiseOrValue<string> | null
    ): UpdateAdapterAdministrativeConsumerEventFilter;

    "UpdateAdapterConsumer(uint256,uint256,address,address)"(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _adapter?: PromiseOrValue<string> | null,
      _consumer?: PromiseOrValue<string> | null
    ): UpdateAdapterConsumerEventFilter;
    UpdateAdapterConsumer(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _adapter?: PromiseOrValue<string> | null,
      _consumer?: PromiseOrValue<string> | null
    ): UpdateAdapterConsumerEventFilter;

    "UpdateAdministrativeOperator(address)"(
      _administrativeOperator?: null
    ): UpdateAdministrativeOperatorEventFilter;
    UpdateAdministrativeOperator(
      _administrativeOperator?: null
    ): UpdateAdministrativeOperatorEventFilter;

    "UpdateAdministrativeState(uint256,address)"(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _operator?: PromiseOrValue<string> | null
    ): UpdateAdministrativeStateEventFilter;
    UpdateAdministrativeState(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _operator?: PromiseOrValue<string> | null
    ): UpdateAdministrativeStateEventFilter;

    "UpdateConditions(uint256,uint256,uint256,uint256,address,uint256)"(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _minPeriod?: null,
      _maxPeriod?: null,
      _maxFutureTime?: null,
      _paymentToken?: PromiseOrValue<string> | null,
      _pricePerSecond?: null
    ): UpdateConditionsEventFilter;
    UpdateConditions(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _minPeriod?: null,
      _maxPeriod?: null,
      _maxFutureTime?: null,
      _paymentToken?: PromiseOrValue<string> | null,
      _pricePerSecond?: null
    ): UpdateConditionsEventFilter;

    "UpdateOperator(uint256,uint256,address)"(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _operator?: PromiseOrValue<string> | null
    ): UpdateOperatorEventFilter;
    UpdateOperator(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _operator?: PromiseOrValue<string> | null
    ): UpdateOperatorEventFilter;

    "UpdateRentConsumer(uint256,uint256,address)"(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _consumer?: PromiseOrValue<string> | null
    ): UpdateRentConsumerEventFilter;
    UpdateRentConsumer(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _consumer?: PromiseOrValue<string> | null
    ): UpdateRentConsumerEventFilter;

    "UpdateState(uint256,uint256,address)"(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _operator?: PromiseOrValue<string> | null
    ): UpdateStateEventFilter;
    UpdateState(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _rentId?: null,
      _operator?: PromiseOrValue<string> | null
    ): UpdateStateEventFilter;

    "Withdraw(uint256,address)"(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _caller?: PromiseOrValue<string> | null
    ): WithdrawEventFilter;
    Withdraw(
      _assetId?: PromiseOrValue<BigNumberish> | null,
      _caller?: PromiseOrValue<string> | null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    administrativeConsumer(
      _metaverseRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    administrativeOperator(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assetAt(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetRentFeesFor(
      _assetId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    calculateRentFee(
      _assetId: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeConsumer(
      _consumer: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimMultipleReferrerFees(
      _paymentTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimMultipleRentFees(
      _assetIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimProtocolFee(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimProtocolFees(
      _tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimReferrerFee(
      _paymentToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimRentFee(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    clearEstateLANDOperators(
      _assetIds: PromiseOrValue<BigNumberish>[],
      _landIds: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    consumableAdapter(
      _metaverseRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    consumerOf(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delist(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    diamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    facetAddress(
      _functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    feePercentage(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feePrecision(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initERC721(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    list(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _metaverseRegistry: PromiseOrValue<string>,
      _metaverseAssetId: PromiseOrValue<BigNumberish>,
      _minPeriod: PromiseOrValue<BigNumberish>,
      _maxPeriod: PromiseOrValue<BigNumberish>,
      _maxFutureTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _pricePerSecond: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    listDecentraland(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _metaverseRegistry: PromiseOrValue<string>,
      _metaverseAssetId: PromiseOrValue<BigNumberish>,
      _minPeriod: PromiseOrValue<BigNumberish>,
      _maxPeriod: PromiseOrValue<BigNumberish>,
      _maxFutureTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _pricePerSecond: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    listWithConsumableAdapter(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _metaverseRegistry: PromiseOrValue<string>,
      _metaverseAssetId: PromiseOrValue<BigNumberish>,
      _minPeriod: PromiseOrValue<BigNumberish>,
      _maxPeriod: PromiseOrValue<BigNumberish>,
      _maxFutureTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _pricePerSecond: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    metaverseName(
      _metaverseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metaverseRegistryReferrer(
      _metaverseRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    operatorFor(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolFeeFor(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referralAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    referrerFee(
      _referrer: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referrerPercentage(
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registryAt(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rent(
      _assetId: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      _maxRentStart: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rentAt(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rentConsumer(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rentDecentraland(
      _assetId: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      _maxRentStart: PromiseOrValue<BigNumberish>,
      _operator: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rentWithConsumer(
      _assetId: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      _maxRentStart: PromiseOrValue<BigNumberish>,
      _consumer: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdministrativeConsumerFor(
      _metaverseRegistry: PromiseOrValue<string>,
      _administrativeConsumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      _baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConsumableAdapter(
      _metaverseRegistry: PromiseOrValue<string>,
      _consumableAdapter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFee(
      _token: PromiseOrValue<string>,
      _feePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMetaverseName(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMetaverseRegistryReferrers(
      _metaverseRegistries: PromiseOrValue<string>[],
      _referrers: PromiseOrValue<string>[],
      _percentages: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReferralAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReferrers(
      _referrers: PromiseOrValue<string>[],
      _mainPercentages: PromiseOrValue<BigNumberish>[],
      _secondaryPercentages: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRegistry(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _registry: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenPayment(
      _token: PromiseOrValue<string>,
      _feePercentage: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsRegistry(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsTokenPayment(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenPaymentAt(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalRegistries(
      _metaverseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalTokenPayments(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAdapterAdministrativeState(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAdapterState(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAdministrativeOperator(
      _administrativeOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAdministrativeState(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateConditions(
      _assetId: PromiseOrValue<BigNumberish>,
      _minPeriod: PromiseOrValue<BigNumberish>,
      _maxPeriod: PromiseOrValue<BigNumberish>,
      _maxFutureTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _pricePerSecond: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateConsumer(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      _newConsumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateOperator(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      _newOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateState(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    administrativeConsumer(
      _metaverseRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    administrativeOperator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assetAt(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetRentFeesFor(
      _assetId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateRentFee(
      _assetId: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeConsumer(
      _consumer: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimMultipleReferrerFees(
      _paymentTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimMultipleRentFees(
      _assetIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimProtocolFee(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimProtocolFees(
      _tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimReferrerFee(
      _paymentToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimRentFee(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    clearEstateLANDOperators(
      _assetIds: PromiseOrValue<BigNumberish>[],
      _landIds: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    consumableAdapter(
      _metaverseRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    consumerOf(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delist(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    diamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    facetAddress(
      _functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePercentage(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feePrecision(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initERC721(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    list(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _metaverseRegistry: PromiseOrValue<string>,
      _metaverseAssetId: PromiseOrValue<BigNumberish>,
      _minPeriod: PromiseOrValue<BigNumberish>,
      _maxPeriod: PromiseOrValue<BigNumberish>,
      _maxFutureTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _pricePerSecond: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    listDecentraland(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _metaverseRegistry: PromiseOrValue<string>,
      _metaverseAssetId: PromiseOrValue<BigNumberish>,
      _minPeriod: PromiseOrValue<BigNumberish>,
      _maxPeriod: PromiseOrValue<BigNumberish>,
      _maxFutureTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _pricePerSecond: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    listWithConsumableAdapter(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _metaverseRegistry: PromiseOrValue<string>,
      _metaverseAssetId: PromiseOrValue<BigNumberish>,
      _minPeriod: PromiseOrValue<BigNumberish>,
      _maxPeriod: PromiseOrValue<BigNumberish>,
      _maxFutureTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _pricePerSecond: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    metaverseName(
      _metaverseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metaverseRegistryReferrer(
      _metaverseRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operatorFor(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFeeFor(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referrerFee(
      _referrer: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referrerPercentage(
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registryAt(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rent(
      _assetId: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      _maxRentStart: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rentAt(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rentConsumer(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rentDecentraland(
      _assetId: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      _maxRentStart: PromiseOrValue<BigNumberish>,
      _operator: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rentWithConsumer(
      _assetId: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      _maxRentStart: PromiseOrValue<BigNumberish>,
      _consumer: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdministrativeConsumerFor(
      _metaverseRegistry: PromiseOrValue<string>,
      _administrativeConsumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      _baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConsumableAdapter(
      _metaverseRegistry: PromiseOrValue<string>,
      _consumableAdapter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      _token: PromiseOrValue<string>,
      _feePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMetaverseName(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMetaverseRegistryReferrers(
      _metaverseRegistries: PromiseOrValue<string>[],
      _referrers: PromiseOrValue<string>[],
      _percentages: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReferralAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReferrers(
      _referrers: PromiseOrValue<string>[],
      _mainPercentages: PromiseOrValue<BigNumberish>[],
      _secondaryPercentages: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRegistry(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _registry: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenPayment(
      _token: PromiseOrValue<string>,
      _feePercentage: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsRegistry(
      _metaverseId: PromiseOrValue<BigNumberish>,
      _registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsTokenPayment(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenPaymentAt(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalRegistries(
      _metaverseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalTokenPayments(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAdapterAdministrativeState(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAdapterState(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAdministrativeOperator(
      _administrativeOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAdministrativeState(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateConditions(
      _assetId: PromiseOrValue<BigNumberish>,
      _minPeriod: PromiseOrValue<BigNumberish>,
      _maxPeriod: PromiseOrValue<BigNumberish>,
      _maxFutureTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _pricePerSecond: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateConsumer(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      _newConsumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateOperator(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      _newOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateState(
      _assetId: PromiseOrValue<BigNumberish>,
      _rentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
