/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  RentPayout,
  RentPayoutInterface,
} from "../../../contracts/shared/RentPayout";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "_assetId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "ClaimRentFee",
    type: "event",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220b4ea3b82818f2bfd3242c9d0e65ae0ac12232cda5a93644535ec233ee003302f64736f6c634300080a0033";

type RentPayoutConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RentPayoutConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RentPayout__factory extends ContractFactory {
  constructor(...args: RentPayoutConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RentPayout> {
    return super.deploy(overrides || {}) as Promise<RentPayout>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RentPayout {
    return super.attach(address) as RentPayout;
  }
  override connect(signer: Signer): RentPayout__factory {
    return super.connect(signer) as RentPayout__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RentPayoutInterface {
    return new utils.Interface(_abi) as RentPayoutInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RentPayout {
    return new Contract(address, _abi, signerOrProvider) as RentPayout;
  }
}
