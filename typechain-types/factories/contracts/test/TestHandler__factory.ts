/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestHandler,
  TestHandlerInterface,
} from "../../../contracts/test/TestHandler";

const _abi = [
  {
    inputs: [],
    name: "dudududu",
    outputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "manager",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50608480601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806354955e5914602d575b600080fd5b6040805160131936013560601c815233602082015281519081900390910190f3fea26469706673582212200816881b1e6b3364b844419bddcd076a17cd14679298cbbab357326f1015bc9964736f6c63430008070033";

type TestHandlerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestHandlerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestHandler__factory extends ContractFactory {
  constructor(...args: TestHandlerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestHandler> {
    return super.deploy(overrides || {}) as Promise<TestHandler>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestHandler {
    return super.attach(address) as TestHandler;
  }
  override connect(signer: Signer): TestHandler__factory {
    return super.connect(signer) as TestHandler__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestHandlerInterface {
    return new utils.Interface(_abi) as TestHandlerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestHandler {
    return new Contract(address, _abi, signerOrProvider) as TestHandler;
  }
}
