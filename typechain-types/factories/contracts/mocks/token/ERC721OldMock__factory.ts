/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ERC721OldMock,
  ERC721OldMockInterface,
} from "../../../../contracts/mocks/token/ERC721OldMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604080518082018252600d81526c4552433732314f6c644d6f636b60981b60208083019182528351808501909452600e84526d1353d0d2cb515490cdcc8c53db1960921b9084015281519192916200006d916000916200008c565b508051620000839060019060208401906200008c565b5050506200016f565b8280546200009a9062000132565b90600052602060002090601f016020900481019282620000be576000855562000109565b82601f10620000d957805160ff191683800117855562000109565b8280016001018555821562000109579182015b8281111562000109578251825591602001919060010190620000ec565b50620001179291506200011b565b5090565b5b808211156200011757600081556001016200011c565b600181811c908216806200014757607f821691505b602082108114156200016957634e487b7160e01b600052602260045260246000fd5b50919050565b6115ab806200017f6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb465146101e1578063b88d4fde146101f4578063c87b56dd14610207578063e985e9c51461021a57600080fd5b80636352211e146101a557806370a08231146101b857806395d89b41146101d957600080fd5b8063095ea7b3116100c8578063095ea7b31461015757806323b872dd1461016c57806340c10f191461017f57806342842e0e1461019257600080fd5b806301ffc9a7146100ef57806306fdde0314610117578063081812fc1461012c575b600080fd5b6101026100fd3660046110e9565b610256565b60405190151581526020015b60405180910390f35b61011f6102a8565b60405161010e919061115e565b61013f61013a366004611171565b61033a565b6040516001600160a01b03909116815260200161010e565b61016a6101653660046111a6565b610361565b005b61016a61017a3660046111d0565b61047c565b61016a61018d3660046111a6565b6104ae565b61016a6101a03660046111d0565b6104bc565b61013f6101b3366004611171565b61055d565b6101cb6101c636600461120c565b6105bd565b60405190815260200161010e565b61011f610643565b61016a6101ef366004611227565b610652565b61016a610202366004611279565b61065d565b61011f610215366004611171565b610695565b610102610228366004611355565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061028757506001600160e01b03198216635b5e139f60e01b145b806102a257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546102b790611388565b80601f01602080910402602001604051908101604052809291908181526020018280546102e390611388565b80156103305780601f1061030557610100808354040283529160200191610330565b820191906000526020600020905b81548152906001019060200180831161031357829003601f168201915b5050505050905090565b600061034582610709565b506000908152600460205260409020546001600160a01b031690565b600061036c8261055d565b9050806001600160a01b0316836001600160a01b031614156103df5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806103fb57506103fb8133610228565b61046d5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016103d6565b610477838361076b565b505050565b610487335b826107d9565b6104a35760405162461bcd60e51b81526004016103d6906113c3565b610477838383610858565b6104b882826109c9565b5050565b6104c533610481565b61052b5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b60648201526084016103d6565b610536838383610858565b6105418383836109e3565b6104775760405162461bcd60e51b81526004016103d690611410565b6000818152600260205260408120546001600160a01b0316806102a25760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016103d6565b60006001600160a01b0382166106275760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016103d6565b506001600160a01b031660009081526003602052604090205490565b6060600180546102b790611388565b6104b8338383610b2a565b61066733836107d9565b6106835760405162461bcd60e51b81526004016103d6906113c3565b61068f84848484610bf9565b50505050565b60606106a082610709565b60006106b760408051602081019091526000815290565b905060008151116106d75760405180602001604052806000815250610702565b806106e184610c2c565b6040516020016106f2929190611462565b6040516020818303038152906040525b9392505050565b6000818152600260205260409020546001600160a01b03166107685760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016103d6565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906107a08261055d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806107e58361055d565b9050806001600160a01b0316846001600160a01b0316148061082c57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806108505750836001600160a01b03166108458461033a565b6001600160a01b0316145b949350505050565b826001600160a01b031661086b8261055d565b6001600160a01b0316146108915760405162461bcd60e51b81526004016103d690611491565b6001600160a01b0382166108f35760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016103d6565b6109008383836001610cc9565b826001600160a01b03166109138261055d565b6001600160a01b0316146109395760405162461bcd60e51b81526004016103d690611491565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6104b8828260405180602001604052806000815250610d51565b60006001600160a01b0383163b15610b205760405163785cf2dd60e11b81526001600160a01b03858116600483015260248201849052606060448301526000606483015284169063f0b9e5ba906084016020604051808303816000875af1925050508015610a6e575060408051601f3d908101601f19168201909252610a6b918101906114d6565b60015b610b06573d808015610a9c576040519150601f19603f3d011682016040523d82523d6000602084013e610aa1565b606091505b5060405162461bcd60e51b815260206004820152603360248201527f4552433732313a207472616e7366657220746f206e6f6e204552433732314f6c604482015272322437b63232b91034b6b83632b6b2b73a32b960691b60648201526084016103d6565b6001600160e01b03191663785cf2dd60e11b149050610702565b5060019392505050565b816001600160a01b0316836001600160a01b03161415610b8c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016103d6565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610c04848484610858565b610c1084848484610d64565b61068f5760405162461bcd60e51b81526004016103d690611410565b60606000610c3983610e62565b600101905060008167ffffffffffffffff811115610c5957610c59611263565b6040519080825280601f01601f191660200182016040528015610c83576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610cbc57610cc1565b610c8d565b509392505050565b600181111561068f576001600160a01b03841615610d0f576001600160a01b03841660009081526003602052604081208054839290610d09908490611509565b90915550505b6001600160a01b0383161561068f576001600160a01b03831660009081526003602052604081208054839290610d46908490611520565b909155505050505050565b610d5b8383610f3a565b61054160008484845b60006001600160a01b0384163b15610e5757604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610da8903390899088908890600401611538565b6020604051808303816000875af1925050508015610de3575060408051601f3d908101601f19168201909252610de0918101906114d6565b60015b610e3d573d808015610e11576040519150601f19603f3d011682016040523d82523d6000602084013e610e16565b606091505b508051610e355760405162461bcd60e51b81526004016103d690611410565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610850565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610ea15772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610ecd576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610eeb57662386f26fc10000830492506010015b6305f5e1008310610f03576305f5e100830492506008015b6127108310610f1757612710830492506004015b60648310610f29576064830492506002015b600a83106102a25760010192915050565b6001600160a01b038216610f905760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016103d6565b6000818152600260205260409020546001600160a01b031615610ff55760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016103d6565b611003600083836001610cc9565b6000818152600260205260409020546001600160a01b0316156110685760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016103d6565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b03198116811461076857600080fd5b6000602082840312156110fb57600080fd5b8135610702816110d3565b60005b83811015611121578181015183820152602001611109565b8381111561068f5750506000910152565b6000815180845261114a816020860160208601611106565b601f01601f19169290920160200192915050565b6020815260006107026020830184611132565b60006020828403121561118357600080fd5b5035919050565b80356001600160a01b03811681146111a157600080fd5b919050565b600080604083850312156111b957600080fd5b6111c28361118a565b946020939093013593505050565b6000806000606084860312156111e557600080fd5b6111ee8461118a565b92506111fc6020850161118a565b9150604084013590509250925092565b60006020828403121561121e57600080fd5b6107028261118a565b6000806040838503121561123a57600080fd5b6112438361118a565b91506020830135801515811461125857600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561128f57600080fd5b6112988561118a565b93506112a66020860161118a565b925060408501359150606085013567ffffffffffffffff808211156112ca57600080fd5b818701915087601f8301126112de57600080fd5b8135818111156112f0576112f0611263565b604051601f8201601f19908116603f0116810190838211818310171561131857611318611263565b816040528281528a602084870101111561133157600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561136857600080fd5b6113718361118a565b915061137f6020840161118a565b90509250929050565b600181811c9082168061139c57607f821691505b602082108114156113bd57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008351611474818460208801611106565b835190830190611488818360208801611106565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6000602082840312156114e857600080fd5b8151610702816110d3565b634e487b7160e01b600052601160045260246000fd5b60008282101561151b5761151b6114f3565b500390565b60008219821115611533576115336114f3565b500190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061156b90830184611132565b969550505050505056fea26469706673582212201007de4018f90def129dbb8f7c501431e5c5f26c02387777c3a95b60265882ae64736f6c634300080a0033";

type ERC721OldMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721OldMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721OldMock__factory extends ContractFactory {
  constructor(...args: ERC721OldMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC721OldMock> {
    return super.deploy(overrides || {}) as Promise<ERC721OldMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC721OldMock {
    return super.attach(address) as ERC721OldMock;
  }
  override connect(signer: Signer): ERC721OldMock__factory {
    return super.connect(signer) as ERC721OldMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721OldMockInterface {
    return new utils.Interface(_abi) as ERC721OldMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721OldMock {
    return new Contract(address, _abi, signerOrProvider) as ERC721OldMock;
  }
}
