/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ERC721Mock,
  ERC721MockInterface,
} from "../../../../contracts/mocks/token/ERC721Mock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604080518082018252600a8152694552433732314d6f636b60b01b60208083019182528351808501909452600b84526a4d4f434b2d45524337323160a81b908401528151919291620000679160009162000086565b5080516200007d90600190602084019062000086565b50505062000169565b82805462000094906200012c565b90600052602060002090601f016020900481019282620000b8576000855562000103565b82601f10620000d357805160ff191683800117855562000103565b8280016001018555821562000103579182015b8281111562000103578251825591602001919060010190620000e6565b506200011192915062000115565b5090565b5b8082111562000111576000815560010162000116565b600181811c908216806200014157607f821691505b602082108114156200016357634e487b7160e01b600052602260045260246000fd5b50919050565b6113fd80620001796000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb465146101e1578063b88d4fde146101f4578063c87b56dd14610207578063e985e9c51461021a57600080fd5b80636352211e146101a557806370a08231146101b857806395d89b41146101d957600080fd5b8063095ea7b3116100c8578063095ea7b31461015757806323b872dd1461016c57806340c10f191461017f57806342842e0e1461019257600080fd5b806301ffc9a7146100ef57806306fdde0314610117578063081812fc1461012c575b600080fd5b6101026100fd366004610f3b565b610256565b60405190151581526020015b60405180910390f35b61011f6102a8565b60405161010e9190610fb0565b61013f61013a366004610fc3565b61033a565b6040516001600160a01b03909116815260200161010e565b61016a610165366004610ff8565b610361565b005b61016a61017a366004611022565b61047c565b61016a61018d366004610ff8565b6104ad565b61016a6101a0366004611022565b6104bb565b61013f6101b3366004610fc3565b6104d6565b6101cb6101c636600461105e565b610536565b60405190815260200161010e565b61011f6105bc565b61016a6101ef366004611079565b6105cb565b61016a6102023660046110cb565b6105d6565b61011f610215366004610fc3565b61060e565b6101026102283660046111a7565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061028757506001600160e01b03198216635b5e139f60e01b145b806102a257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546102b7906111da565b80601f01602080910402602001604051908101604052809291908181526020018280546102e3906111da565b80156103305780601f1061030557610100808354040283529160200191610330565b820191906000526020600020905b81548152906001019060200180831161031357829003601f168201915b5050505050905090565b600061034582610682565b506000908152600460205260409020546001600160a01b031690565b600061036c826104d6565b9050806001600160a01b0316836001600160a01b031614156103df5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806103fb57506103fb8133610228565b61046d5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016103d6565b61047783836106e4565b505050565b6104863382610752565b6104a25760405162461bcd60e51b81526004016103d690611215565b6104778383836107d1565b6104b78282610942565b5050565b610477838383604051806020016040528060008152506105d6565b6000818152600260205260408120546001600160a01b0316806102a25760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016103d6565b60006001600160a01b0382166105a05760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016103d6565b506001600160a01b031660009081526003602052604090205490565b6060600180546102b7906111da565b6104b733838361095c565b6105e03383610752565b6105fc5760405162461bcd60e51b81526004016103d690611215565b61060884848484610a2b565b50505050565b606061061982610682565b600061063060408051602081019091526000815290565b90506000815111610650576040518060200160405280600081525061067b565b8061065a84610a5e565b60405160200161066b929190611262565b6040516020818303038152906040525b9392505050565b6000818152600260205260409020546001600160a01b03166106e15760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016103d6565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610719826104d6565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061075e836104d6565b9050806001600160a01b0316846001600160a01b031614806107a557506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806107c95750836001600160a01b03166107be8461033a565b6001600160a01b0316145b949350505050565b826001600160a01b03166107e4826104d6565b6001600160a01b03161461080a5760405162461bcd60e51b81526004016103d690611291565b6001600160a01b03821661086c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016103d6565b6108798383836001610afb565b826001600160a01b031661088c826104d6565b6001600160a01b0316146108b25760405162461bcd60e51b81526004016103d690611291565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6104b7828260405180602001604052806000815250610b83565b816001600160a01b0316836001600160a01b031614156109be5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016103d6565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610a368484846107d1565b610a4284848484610bb6565b6106085760405162461bcd60e51b81526004016103d6906112d6565b60606000610a6b83610cb4565b600101905060008167ffffffffffffffff811115610a8b57610a8b6110b5565b6040519080825280601f01601f191660200182016040528015610ab5576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610aee57610af3565b610abf565b509392505050565b6001811115610608576001600160a01b03841615610b41576001600160a01b03841660009081526003602052604081208054839290610b3b90849061133e565b90915550505b6001600160a01b03831615610608576001600160a01b03831660009081526003602052604081208054839290610b78908490611355565b909155505050505050565b610b8d8383610d8c565b610b9a6000848484610bb6565b6104775760405162461bcd60e51b81526004016103d6906112d6565b60006001600160a01b0384163b15610ca957604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610bfa90339089908890889060040161136d565b6020604051808303816000875af1925050508015610c35575060408051601f3d908101601f19168201909252610c32918101906113aa565b60015b610c8f573d808015610c63576040519150601f19603f3d011682016040523d82523d6000602084013e610c68565b606091505b508051610c875760405162461bcd60e51b81526004016103d6906112d6565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506107c9565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610cf35772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610d1f576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610d3d57662386f26fc10000830492506010015b6305f5e1008310610d55576305f5e100830492506008015b6127108310610d6957612710830492506004015b60648310610d7b576064830492506002015b600a83106102a25760010192915050565b6001600160a01b038216610de25760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016103d6565b6000818152600260205260409020546001600160a01b031615610e475760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016103d6565b610e55600083836001610afb565b6000818152600260205260409020546001600160a01b031615610eba5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016103d6565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b0319811681146106e157600080fd5b600060208284031215610f4d57600080fd5b813561067b81610f25565b60005b83811015610f73578181015183820152602001610f5b565b838111156106085750506000910152565b60008151808452610f9c816020860160208601610f58565b601f01601f19169290920160200192915050565b60208152600061067b6020830184610f84565b600060208284031215610fd557600080fd5b5035919050565b80356001600160a01b0381168114610ff357600080fd5b919050565b6000806040838503121561100b57600080fd5b61101483610fdc565b946020939093013593505050565b60008060006060848603121561103757600080fd5b61104084610fdc565b925061104e60208501610fdc565b9150604084013590509250925092565b60006020828403121561107057600080fd5b61067b82610fdc565b6000806040838503121561108c57600080fd5b61109583610fdc565b9150602083013580151581146110aa57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156110e157600080fd5b6110ea85610fdc565b93506110f860208601610fdc565b925060408501359150606085013567ffffffffffffffff8082111561111c57600080fd5b818701915087601f83011261113057600080fd5b813581811115611142576111426110b5565b604051601f8201601f19908116603f0116810190838211818310171561116a5761116a6110b5565b816040528281528a602084870101111561118357600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080604083850312156111ba57600080fd5b6111c383610fdc565b91506111d160208401610fdc565b90509250929050565b600181811c908216806111ee57607f821691505b6020821081141561120f57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60008351611274818460208801610f58565b835190830190611288818360208801610f58565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008282101561135057611350611328565b500390565b6000821982111561136857611368611328565b500190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906113a090830184610f84565b9695505050505050565b6000602082840312156113bc57600080fd5b815161067b81610f2556fea26469706673582212207339a03b8b42ba739ace9404fc7ecd3dc90692a923963c7d2a28e6d4d71a91d864736f6c634300080a0033";

type ERC721MockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721MockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721Mock__factory extends ContractFactory {
  constructor(...args: ERC721MockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC721Mock> {
    return super.deploy(overrides || {}) as Promise<ERC721Mock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC721Mock {
    return super.attach(address) as ERC721Mock;
  }
  override connect(signer: Signer): ERC721Mock__factory {
    return super.connect(signer) as ERC721Mock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721MockInterface {
    return new utils.Interface(_abi) as ERC721MockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721Mock {
    return new Contract(address, _abi, signerOrProvider) as ERC721Mock;
  }
}
