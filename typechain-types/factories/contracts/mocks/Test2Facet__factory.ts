/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Test2Facet,
  Test2FacetInterface,
} from "../../../contracts/mocks/Test2Facet";

const _abi = [
  {
    inputs: [],
    name: "test1Func1",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50607780601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806319e3b53314602d575b600080fd5b600260405190815260200160405180910390f3fea2646970667358221220ec8255d178d1404740e954b265de1ed4849946dfd8ab30742237c590ed96c86164736f6c634300080a0033";

type Test2FacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Test2FacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Test2Facet__factory extends ContractFactory {
  constructor(...args: Test2FacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Test2Facet> {
    return super.deploy(overrides || {}) as Promise<Test2Facet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Test2Facet {
    return super.attach(address) as Test2Facet;
  }
  override connect(signer: Signer): Test2Facet__factory {
    return super.connect(signer) as Test2Facet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Test2FacetInterface {
    return new utils.Interface(_abi) as Test2FacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Test2Facet {
    return new Contract(address, _abi, signerOrProvider) as Test2Facet;
  }
}
